
import { useState, useEffect, useCallback } from "react";
import { useSearchParams, useNavigate } from "react-router-dom";
import { Button } from "@/components/ui/button";
import GameControls from "@/components/GameControls";
import GameArea from "@/components/GameArea";
import { getGameById, getRandomGameForPlayerCount } from "@/lib/gameTypes";

interface PlayerState {
  id: number;
  score: number;
  isActive: boolean;
  isWinner: boolean;
}

const Game = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const playersCount = parseInt(searchParams.get("players") || "4", 10);
  const initialGameId = searchParams.get("gameId");
  const totalRounds = parseInt(searchParams.get("rounds") || "1", 10);
  const gamesParam = searchParams.get("games") || "";
  const roundGames = gamesParam ? gamesParam.split(',') : [];
  
  const [gameStarted, setGameStarted] = useState(false);
  const [gameOver, setGameOver] = useState(false);
  const [currentRound, setCurrentRound] = useState(1);
  const [timeLeft, setTimeLeft] = useState(60);
  const [players, setPlayers] = useState<PlayerState[]>([]);
  const [currentGame, setCurrentGame] = useState<any>(null);
  const [currentGameId, setCurrentGameId] = useState<string | null>(initialGameId);
  const [isMultiRound, setIsMultiRound] = useState(totalRounds > 1);
  const [showRoundSummary, setShowRoundSummary] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä–µ
  useEffect(() => {
    let gameId = currentGameId;
    
    // –ï—Å–ª–∏ —É –Ω–∞—Å —Ä–µ–∂–∏–º —Ä–∞—É–Ω–¥–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º –∏–≥—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
    if (isMultiRound && roundGames.length > 0) {
      const roundIndex = currentRound - 1;
      if (roundIndex < roundGames.length) {
        gameId = roundGames[roundIndex];
      }
    }
    
    let game;
    if (gameId) {
      game = getGameById(gameId);
    }
    
    if (!game) {
      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é
      game = getRandomGameForPlayerCount(playersCount);
    }
    
    setCurrentGame(game);
    setCurrentGameId(game.id);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    if (game && game.duration) {
      setTimeLeft(game.duration);
    } else {
      setTimeLeft(60);
    }
  }, [currentGameId, playersCount, currentRound, isMultiRound, roundGames]);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤
  useEffect(() => {
    const initialPlayers = Array.from({ length: playersCount }).map((_, index) => ({
      id: index + 1,
      score: 0,
      isActive: false,
      isWinner: false
    }));
    setPlayers(initialPlayers);
  }, [playersCount]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞
  const endRound = useCallback(() => {
    setGameOver(true);
    
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
    const maxScore = Math.max(...players.map(p => p.score));
    
    setPlayers(prev => 
      prev.map(player => ({
        ...player,
        isWinner: player.score === maxScore && maxScore > 0
      }))
    );
    
    // –ï—Å–ª–∏ —ç—Ç–æ –º–Ω–æ–≥–æ—Ä–∞—É–Ω–¥–æ–≤—ã–π —Ä–µ–∂–∏–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏ —Ä–∞—É–Ω–¥–∞
    if (isMultiRound) {
      setShowRoundSummary(true);
    }
  }, [players, isMultiRound]);

  // –õ–æ–≥–∏–∫–∞ —Ç–∞–π–º–µ—Ä–∞
  useEffect(() => {
    let timer: number | null = null;
    
    if (gameStarted && !gameOver && timeLeft > 0) {
      timer = window.setInterval(() => {
        setTimeLeft(prev => {
          if (prev <= 1) {
            if (timer) clearInterval(timer);
            endRound();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    
    return () => {
      if (timer) clearInterval(timer);
    };
  }, [gameStarted, gameOver, timeLeft, endRound]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
  const updatePlayerScore = useCallback((playerId: number, points: number) => {
    setPlayers(prev => 
      prev.map(player => {
        if (player.id === playerId) {
          return { 
            ...player, 
            score: Math.max(0, player.score + points) // –°—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º
          };
        } 
        return player;
      })
    );
  }, []);

  // –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
  const startGame = () => {
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    setPlayers(prev => 
      prev.map(player => ({
        ...player,
        isActive: true
      }))
    );
    setGameStarted(true);
    setGameOver(false);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    if (currentGame && currentGame.duration) {
      setTimeLeft(currentGame.duration);
    } else {
      setTimeLeft(60);
    }
  };

  // –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
  const startNewRound = () => {
    // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥, —Ç–æ —É–∂–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
    if (isMultiRound && currentRound >= totalRounds) {
      return;
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ä–∞—É–Ω–¥–∞
    setCurrentRound(prev => prev + 1);
    setGameOver(false);
    setShowRoundSummary(false);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∫–∏
    setPlayers(prev => 
      prev.map(player => ({
        ...player,
        isActive: true,
        isWinner: false
      }))
    );
  };

  // –†–µ—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã
  const restartGame = () => {
    setPlayers(prev => 
      prev.map(player => ({
        id: player.id,
        score: 0,
        isActive: false,
        isWinner: false
      }))
    );
    setCurrentRound(1);
    setGameStarted(false);
    setGameOver(false);
    setShowRoundSummary(false);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    if (currentGame && currentGame.duration) {
      setTimeLeft(currentGame.duration);
    } else {
      setTimeLeft(60);
    }
  };

  // –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É
  const selectNewGame = () => {
    navigate("/");
  };

  // –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
  const goToHome = () => {
    navigate("/");
  };

  // –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const renderGame = () => {
    // –î–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
    if (!gameStarted) {
      return (
        <div className="flex flex-col items-center justify-center h-full p-4">
          {currentGame && (
            <div className="text-center mb-6">
              <div className="text-6xl mb-2">{currentGame.icon}</div>
              <h2 className="text-2xl md:text-3xl font-bold mb-2 text-indigo-800">{currentGame.title}</h2>
              <p className="text-md md:text-lg text-indigo-600 mb-4">{currentGame.description}</p>
              <p className="bg-indigo-50 p-3 rounded-lg text-indigo-700 max-w-md mx-auto">
                {currentGame.instructions}
              </p>
            </div>
          )}
          
          {isMultiRound && (
            <div className="mb-4 text-center">
              <div className="text-indigo-800 font-bold">
                –†–∞—É–Ω–¥ {currentRound} –∏–∑ {totalRounds}
              </div>
            </div>
          )}
          
          <div className="my-4 sm:my-6">
            <h3 className="text-lg md:text-xl font-bold mb-3 text-indigo-800">
              {playersCount} {playersCount === 1 ? "–∏–≥—Ä–æ–∫" : playersCount < 5 ? "–∏–≥—Ä–æ–∫–∞" : "–∏–≥—Ä–æ–∫–æ–≤"}
            </h3>
            <div className="flex justify-center gap-3">
              {Array.from({ length: playersCount }).map((_, i) => (
                <div 
                  key={i} 
                  className="w-10 h-10 md:w-12 md:h-12 rounded-full flex items-center justify-center text-white font-bold text-lg"
                  style={{ backgroundColor: getPlayerColor(i + 1) }}
                >
                  {i + 1}
                </div>
              ))}
            </div>
          </div>
          
          <div className="flex flex-col sm:flex-row gap-3">
            <Button 
              variant="outline"
              onClick={selectNewGame}
              className="text-indigo-600 border-indigo-300"
            >
              –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É
            </Button>
            
            <Button 
              onClick={startGame} 
              size="lg" 
              className="text-lg md:text-xl py-4 md:py-6 px-8 md:px-12 bg-indigo-600 hover:bg-indigo-700 animate-bounce-custom"
            >
              –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
            </Button>
          </div>
        </div>
      );
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏ —Ä–∞—É–Ω–¥–∞
    if (showRoundSummary) {
      const isLastRound = currentRound >= totalRounds;
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
      const roundWinner = players.find(p => p.isWinner);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞—É–Ω–¥, –Ω–∞—Ö–æ–¥–∏–º –æ–±—â–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      let finalWinner = null;
      if (isLastRound) {
        const maxScore = Math.max(...players.map(p => p.score));
        finalWinner = players.find(p => p.score === maxScore);
      }
      
      return (
        <div className="flex flex-col items-center justify-center h-full p-4 text-center">
          {isLastRound ? (
            <div className="mb-8">
              <h2 className="text-3xl md:text-4xl font-bold mb-4 text-indigo-800">–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h2>
              <div className="text-6xl mb-4">üèÜ</div>
              <div className="text-xl md:text-2xl font-bold mb-2" style={{ color: getPlayerColor(finalWinner?.id || 1) }}>
                –ü–æ–±–µ–¥–∏–ª –ò–≥—Ä–æ–∫ {finalWinner?.id}
              </div>
              <div className="text-lg md:text-xl">
                —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {finalWinner?.score} {finalWinner?.score === 1 ? "–æ—á–∫–æ" : finalWinner?.score && finalWinner?.score < 5 ? "–æ—á–∫–∞" : "–æ—á–∫–æ–≤"}
              </div>
            </div>
          ) : (
            <div className="mb-8">
              <h2 className="text-2xl md:text-3xl font-bold mb-2 text-indigo-800">–†–∞—É–Ω–¥ {currentRound} –∑–∞–≤–µ—Ä—à–µ–Ω!</h2>
              {roundWinner && (
                <div className="text-xl font-bold mb-2" style={{ color: getPlayerColor(roundWinner.id) }}>
                  –ü–æ–±–µ–¥–∏–ª –ò–≥—Ä–æ–∫ {roundWinner.id} –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
                </div>
              )}
            </div>
          )}
          
          <div className="mb-8 w-full max-w-md">
            <h3 className="text-xl font-bold mb-3 text-indigo-800">–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç:</h3>
            <div className="grid gap-2">
              {players.map(player => (
                <div 
                  key={player.id} 
                  className="bg-white p-3 rounded-lg shadow-sm flex justify-between items-center"
                  style={{ borderLeft: `4px solid ${getPlayerColor(player.id)}` }}
                >
                  <div className="font-bold">–ò–≥—Ä–æ–∫ {player.id}</div>
                  <div className="text-xl font-bold">
                    {player.score}
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          <div className="flex flex-col sm:flex-row gap-3">
            <Button 
              variant="outline"
              onClick={restartGame}
              className="text-indigo-600 border-indigo-300"
            >
              –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
            </Button>
            
            {isLastRound ? (
              <Button 
                onClick={goToHome}
                size="lg"
                className="bg-indigo-600 hover:bg-indigo-700 text-white"
              >
                –ù–∞ –≥–ª–∞–≤–Ω—É—é
              </Button>
            ) : (
              <Button 
                onClick={startNewRound}
                size="lg"
                className="bg-indigo-600 hover:bg-indigo-700 text-white"
              >
                –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
              </Button>
            )}
          </div>
        </div>
      );
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    return (
      <div className="h-full flex flex-col">
        <GameControls 
          timeLeft={timeLeft} 
          round={currentRound}
          totalRounds={isMultiRound ? totalRounds : undefined}
          gameOver={gameOver}
          players={players}
          gameName={currentGame?.title || "–ò–≥—Ä–∞"}
          onNewRound={isMultiRound ? () => setShowRoundSummary(true) : startNewRound}
          onRestart={restartGame}
          onHome={goToHome}
        />
        
        <div className={`flex-1 grid ${getGridTemplateByPlayers(playersCount)} gap-2 p-2`}>
          {players.map((player) => (
            <GameArea
              key={player.id}
              gameId={currentGameId || 'number-tap'}
              player={player}
              updateScore={updatePlayerScore}
              gameOver={gameOver}
            />
          ))}
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen flex flex-col bg-gray-100">
      {renderGame()}
    </div>
  );
};

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Å–µ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞ –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
function getGridTemplateByPlayers(count: number): string {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  const isMobile = window.innerWidth < 768;
  
  if (isMobile) {
    switch (count) {
      case 1: return "grid-cols-1";
      case 2: return "grid-cols-1 grid-rows-2";
      case 3: return "grid-cols-1 grid-rows-3";
      case 4: return "grid-cols-1 grid-rows-4";
      default: return "grid-cols-1 grid-rows-4";
    }
  } else {
    // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–æ–≤
    switch (count) {
      case 1: return "grid-cols-1";
      case 2: return "grid-cols-2";
      case 3: return "grid-cols-3";
      case 4: return "grid-cols-2 grid-rows-2";
      default: return "grid-cols-2 grid-rows-2";
    }
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–∞
function getPlayerColor(playerNumber: number): string {
  const colors = {
    1: "#FF5252", // –ö—Ä–∞—Å–Ω—ã–π
    2: "#4CAF50", // –ó–µ–ª–µ–Ω—ã–π
    3: "#2196F3", // –°–∏–Ω–∏–π
    4: "#FF9800", // –û—Ä–∞–Ω–∂–µ–≤—ã–π
  };
  return colors[playerNumber as keyof typeof colors] || "#9E9E9E";
}

export default Game;
