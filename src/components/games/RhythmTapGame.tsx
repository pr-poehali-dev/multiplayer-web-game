
import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";

interface RhythmTapGameProps {
  player: {
    id: number;
    score: number;
    isActive: boolean;
    isWinner: boolean;
  };
  updateScore: (playerId: number, points: number) => void;
  gameOver: boolean;
}

type Note = {
  id: number;
  lane: number;
  position: number; // –æ—Ç 0 –¥–æ 100
  hit: boolean;
  missed: boolean;
};

const RhythmTapGame = ({ player, updateScore, gameOver }: RhythmTapGameProps) => {
  const [notes, setNotes] = useState<Note[]>([]);
  const [combo, setCombo] = useState(0);
  const [maxCombo, setMaxCombo] = useState(0);
  const [hitCount, setHitCount] = useState(0);
  const [missCount, setMissCount] = useState(0);
  const [lastFeedback, setLastFeedback] = useState("");
  const [speed, setSpeed] = useState(1.5); // –°–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –Ω–æ—Ç
  
  const gameLoopRef = useRef<number | null>(null);
  const lastNoteTimeRef = useRef<number>(0);
  const noteCounter = useRef(0);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    if (player.isActive && !gameOver) {
      startGame();
    }
    
    return () => {
      if (gameLoopRef.current) {
        cancelAnimationFrame(gameLoopRef.current);
      }
    };
  }, [player.isActive, gameOver]);
  
  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
  const startGame = () => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setNotes([]);
    setCombo(0);
    setMaxCombo(0);
    setHitCount(0);
    setMissCount(0);
    setLastFeedback("");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    gameLoop(performance.now());
  };
  
  // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
  const gameLoop = (timestamp: number) => {
    // –î–≤–∏–≥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–æ—Ç—ã
    setNotes(prevNotes => {
      const updatedNotes = prevNotes.map(note => {
        // –î–≤–∏–≥–∞–µ–º –Ω–æ—Ç—É –≤–Ω–∏–∑
        const newPosition = note.position + speed;
        
        // –ü–æ–º–µ—á–∞–µ–º –Ω–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏
        let missed = note.missed;
        if (newPosition > 110 && !note.hit && !note.missed) {
          missed = true;
          handleMiss();
        }
        
        return {
          ...note,
          position: newPosition,
          missed
        };
      });
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞
      return updatedNotes.filter(note => note.position < 120);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–æ—Ç—ã —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é
    const shouldAddNote = Math.random() < 0.03; // 3% —à–∞–Ω—Å –∫–∞–∂–¥—ã–π —Ñ—Ä–µ–π–º
    
    if (shouldAddNote && timestamp - lastNoteTimeRef.current > 500) { // –ú–∏–Ω–∏–º—É–º 500–º—Å –º–µ–∂–¥—É –Ω–æ—Ç–∞–º–∏
      const lane = Math.floor(Math.random() * 4); // –°–ª—É—á–∞–π–Ω–∞—è –¥–æ—Ä–æ–∂–∫–∞ (0-3)
      
      setNotes(prevNotes => [
        ...prevNotes,
        {
          id: noteCounter.current++,
          lane,
          position: 0, // –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä—Ö—É
          hit: false,
          missed: false
        }
      ]);
      
      lastNoteTimeRef.current = timestamp;
    }
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    if (!gameOver) {
      gameLoopRef.current = requestAnimationFrame(gameLoop);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –¥–æ—Ä–æ–∂–∫—É
  const handleLaneClick = (lane: number) => {
    if (gameOver || !player.isActive) return;
    
    // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –Ω–æ—Ç—É –≤ —ç—Ç–æ–π –¥–æ—Ä–æ–∂–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–æ–Ω–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è
    const hitZone = [90, 110]; // –ó–æ–Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è (–æ—Ç 90% –¥–æ 110% –≤—ã—Å–æ—Ç—ã)
    
    const noteIndex = notes.findIndex(note => 
      note.lane === lane && 
      !note.hit && 
      !note.missed && 
      note.position >= hitZone[0] && 
      note.position <= hitZone[1]
    );
    
    if (noteIndex !== -1) {
      // –ù–∞—à–ª–∏ –Ω–æ—Ç—É –¥–ª—è –ø–æ–ø–∞–¥–∞–Ω–∏—è
      handleHit(noteIndex);
    } else {
      // –ü—Ä–æ–º–∞—Ö - –Ω–µ—Ç –Ω–æ—Ç—ã –≤ –∑–æ–Ω–µ –ø–æ–ø–∞–¥–∞–Ω–∏—è
      handleMiss();
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è
  const handleHit = (noteIndex: number) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ—Ç—É
    setNotes(prevNotes => 
      prevNotes.map((note, index) => 
        index === noteIndex ? { ...note, hit: true } : note
      )
    );
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø–∞–¥–∞–Ω–∏–π
    setHitCount(prev => prev + 1);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–º–±–æ
    const newCombo = combo + 1;
    setCombo(newCombo);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–º–±–æ
    if (newCombo > maxCombo) {
      setMaxCombo(newCombo);
    }
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ (–±–æ–ª—å—à–µ –∑–∞ –¥–ª–∏–Ω–Ω–æ–µ –∫–æ–º–±–æ)
    const points = Math.min(1 + Math.floor(newCombo / 5), 3);
    updateScore(player.id, points);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    if (newCombo >= 10) {
      setLastFeedback("–°–£–ü–ï–†!");
    } else if (newCombo >= 5) {
      setLastFeedback("–û–¢–õ–ò–ß–ù–û!");
    } else {
      setLastFeedback("–ü–û–ü–ê–î–ê–ù–ò–ï!");
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π
    if (hitCount % 10 === 0) {
      setSpeed(prev => Math.min(prev + 0.1, 3));
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–∞—Ö–∞
  const handleMiss = () => {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ–º–∞—Ö–æ–≤
    setMissCount(prev => prev + 1);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ
    setCombo(0);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    setLastFeedback("–ü–†–û–ú–ê–•!");
  };
  
  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞
  const getPlayerColor = () => {
    const colors = ["#FF5252", "#4CAF50", "#2196F3", "#FF9800"];
    return colors[player.id - 1] || colors[0];
  };
  
  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –¥–æ—Ä–æ–∂–∫–∏
  const getLaneColor = (laneIndex: number) => {
    const colors = ["#FF5252", "#4CAF50", "#2196F3", "#FF9800"];
    return colors[laneIndex] || colors[0];
  };
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  const playerAreaStyle = {
    backgroundColor: player.isWinner ? "#FFF9C4" : "white",
    borderColor: getPlayerColor(),
    boxShadow: player.isWinner ? `0 0 20px ${getPlayerColor()}` : "none",
  };
  
  return (
    <div 
      className={`rounded-lg border-4 flex flex-col p-2 transition-all duration-300 ${
        gameOver && player.isWinner ? "animate-bounce-custom" : ""
      }`}
      style={playerAreaStyle}
    >
      <div className="flex justify-between items-center mb-2">
        <div className="text-lg font-bold" style={{ color: getPlayerColor() }}>
          –ò–≥—Ä–æ–∫ {player.id}
        </div>
        <div className="text-lg font-bold">
          {player.score} {player.score === 1 ? "–æ—á–∫–æ" : player.score < 5 ? "–æ—á–∫–∞" : "–æ—á–∫–æ–≤"}
        </div>
      </div>
      
      {!gameOver && (
        <div className="flex items-center justify-between mb-2">
          <div className="text-sm">
            –ö–æ–º–±–æ: <span className="font-bold">{combo}</span>
          </div>
          <div className="text-md font-bold" style={{ color: getPlayerColor() }}>
            {lastFeedback}
          </div>
          <div className="text-sm">
            –ú–∞–∫—Å: <span className="font-bold">{maxCombo}</span>
          </div>
        </div>
      )}
      
      {gameOver && player.isWinner && (
        <div className="text-center mb-2 text-xl font-bold text-yellow-600">
          –ü–û–ë–ï–î–ò–¢–ï–õ–¨! üèÜ
        </div>
      )}
      
      <div className="flex-1 grid grid-cols-4 gap-1">
        {[0, 1, 2, 3].map(lane => (
          <div 
            key={`lane-${lane}`} 
            className="relative flex flex-col"
            style={{ height: '100%' }}
          >
            {/* –ù–æ—Ç—ã –≤ —ç—Ç–æ–π –¥–æ—Ä–æ–∂–∫–µ */}
            {notes
              .filter(note => note.lane === lane && !note.hit)
              .map(note => (
                <div
                  key={`note-${note.id}`}
                  className="absolute w-full flex justify-center items-center"
                  style={{
                    top: `${note.position}%`,
                    opacity: note.missed ? 0.3 : 1
                  }}
                >
                  <div 
                    className="w-12 h-12 rounded-full flex items-center justify-center"
                    style={{ 
                      backgroundColor: getLaneColor(lane),
                      transform: 'scale(0.7)'
                    }}
                  >
                    <span className="text-white text-2xl">
                      {lane + 1}
                    </span>
                  </div>
                </div>
              ))}
            
            {/* –ó–æ–Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–∏—è */}
            <div 
              className="absolute bottom-0 w-full border-2 border-gray-400 h-8 rounded"
              style={{ borderStyle: 'dashed' }}
            />
            
            {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è */}
            <Button
              className="mt-auto h-14 flex items-center justify-center"
              style={{
                backgroundColor: getLaneColor(lane),
                opacity: gameOver ? 0.7 : 1,
              }}
              disabled={gameOver}
              onClick={() => handleLaneClick(lane)}
            >
              <span className="text-white text-2xl">
                {lane + 1}
              </span>
            </Button>
          </div>
        ))}
      </div>
      
      <div className="text-xs text-gray-500 mt-1 flex justify-between">
        <div>–ü–æ–ø–∞–¥–∞–Ω–∏–π: {hitCount}</div>
        <div>–ü—Ä–æ–º–∞—Ö–æ–≤: {missCount}</div>
      </div>
    </div>
  );
};

export default RhythmTapGame;
