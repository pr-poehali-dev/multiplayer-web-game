
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";

interface MazeRunnerGameProps {
  player: {
    id: number;
    score: number;
    isActive: boolean;
    isWinner: boolean;
  };
  updateScore: (playerId: number, points: number) => void;
  gameOver: boolean;
}

type Cell = {
  x: number;
  y: number;
  isWall: boolean;
  isPath: boolean;
  isVisited: boolean;
  hasCoin: boolean;
  isStart: boolean;
  isEnd: boolean;
};

type Position = {
  x: number;
  y: number;
};

const MazeRunnerGame = ({ player, updateScore, gameOver }: MazeRunnerGameProps) => {
  const [maze, setMaze] = useState<Cell[][]>([]);
  const [playerPosition, setPlayerPosition] = useState<Position>({ x: 0, y: 0 });
  const [level, setLevel] = useState(1);
  const [collectedCoins, setCollectedCoins] = useState(0);
  const [steps, setSteps] = useState(0);
  const [mazeSize, setMazeSize] = useState(7); // –Ω–µ—á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const [message, setMessage] = useState("");
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  useEffect(() => {
    if (player.isActive && !gameOver) {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
      const size = Math.min(7 + (level - 1) * 2, 11);
      setMazeSize(size);
      
      generateMaze(size);
    }
  }, [player.isActive, gameOver, level]);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
  const generateMaze = (size: number) => {
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É, –≥–¥–µ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ - —Å—Ç–µ–Ω—ã
    const grid: Cell[][] = [];
    for (let y = 0; y < size; y++) {
      const row: Cell[] = [];
      for (let x = 0; x < size; x++) {
        row.push({
          x,
          y,
          isWall: true,
          isPath: false,
          isVisited: false,
          hasCoin: false,
          isStart: false,
          isEnd: false
        });
      }
      grid.push(row);
    }
    
    // –ù–∞—á–∞–ª—å–Ω–∞—è –∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∏
    const startPos = { x: 1, y: 1 };
    const endPos = { x: size - 2, y: size - 2 };
    
    // –ü—Ä–æ–∫–ª–∞–¥—ã–≤–∞–µ–º –ø—É—Ç—å –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞
    carvePath(grid, startPos.x, startPos.y);
    
    // –û—Ç–º–µ—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫–∏
    grid[startPos.y][startPos.x].isStart = true;
    grid[startPos.y][startPos.x].isWall = false;
    grid[startPos.y][startPos.x].isPath = true;
    
    grid[endPos.y][endPos.x].isEnd = true;
    grid[endPos.y][endPos.x].isWall = false;
    grid[endPos.y][endPos.x].isPath = true;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –Ω–∞ –ø—É—Ç—å
    addCoins(grid, level);
    
    setMaze(grid);
    setPlayerPosition(startPos);
    setCollectedCoins(0);
    setSteps(0);
    setMessage("–ù–∞–π–¥–∏—Ç–µ –≤—ã—Ö–æ–¥ –∏–∑ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞!");
  };
  
  // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –ø—É—Ç–∏
  const carvePath = (grid: Cell[][], x: number, y: number) => {
    // –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–ª–µ—Ç–∫—É –∫–∞–∫ –ø—É—Ç—å
    grid[y][x].isWall = false;
    grid[y][x].isPath = true;
    grid[y][x].isVisited = true;
    
    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è (–≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
    const directions = [
      { dx: 0, dy: -2 }, // –í–≤–µ—Ä—Ö
      { dx: 2, dy: 0 },  // –í–ø—Ä–∞–≤–æ
      { dx: 0, dy: 2 },  // –í–Ω–∏–∑
      { dx: -2, dy: 0 }  // –í–ª–µ–≤–æ
    ].sort(() => Math.random() - 0.5);
    
    // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    for (const dir of directions) {
      const nx = x + dir.dx;
      const ny = y + dir.dy;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∏ –Ω–µ –ø–æ—Å–µ—â–µ–Ω–∞
      if (nx >= 0 && nx < grid[0].length && ny >= 0 && ny < grid.length && !grid[ny][nx].isVisited) {
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–µ–Ω—É –º–µ–∂–¥—É —Ç–µ–∫—É—â–µ–π –∏ –Ω–æ–≤–æ–π –∫–ª–µ—Ç–∫–æ–π
        grid[y + dir.dy/2][x + dir.dx/2].isWall = false;
        grid[y + dir.dy/2][x + dir.dx/2].isPath = true;
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–∫–ª–∞–¥–∫—É –ø—É—Ç–∏ –∏–∑ –Ω–æ–≤–æ–π –∫–ª–µ—Ç–∫–∏
        carvePath(grid, nx, ny);
      }
    }
  };
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–µ—Ç –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç
  const addCoins = (grid: Cell[][], level: number) => {
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è
    const coinsCount = Math.min(3 + level, 10);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –ø—É—Ç–∏
    const pathCells: Position[] = [];
    
    for (let y = 0; y < grid.length; y++) {
      for (let x = 0; x < grid[0].length; x++) {
        if (grid[y][x].isPath && !grid[y][x].isStart && !grid[y][x].isEnd) {
          pathCells.push({ x, y });
        }
      }
    }
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ N –∫–ª–µ—Ç–æ–∫ –¥–ª—è –º–æ–Ω–µ—Ç
    pathCells.sort(() => Math.random() - 0.5);
    
    for (let i = 0; i < Math.min(coinsCount, pathCells.length); i++) {
      const { x, y } = pathCells[i];
      grid[y][x].hasCoin = true;
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
  const movePlayer = (dx: number, dy: number) => {
    if (gameOver || !player.isActive) return;
    
    const newX = playerPosition.x + dx;
    const newY = playerPosition.y + dy;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –∏ –Ω–µ —Å—Ç–µ–Ω–∞
    if (newX >= 0 && newX < maze[0].length && newY >= 0 && newY < maze.length && !maze[newY][newX].isWall) {
      setPlayerPosition({ x: newX, y: newY });
      setSteps(prev => prev + 1);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –Ω–æ–≤–æ–π –∫–ª–µ—Ç–∫–µ –º–æ–Ω–µ—Ç–∞
      if (maze[newY][newX].hasCoin) {
        collectCoin(newX, newY);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –∏–≥—Ä–æ–∫ –≤—ã—Ö–æ–¥–∞
      if (maze[newY][newX].isEnd) {
        completeLevel();
      }
    }
  };
  
  // –°–±–æ—Ä –º–æ–Ω–µ—Ç—ã
  const collectCoin = (x: number, y: number) => {
    setMaze(prev => {
      const newMaze = [...prev];
      newMaze[y] = [...newMaze[y]];
      newMaze[y][x] = { ...newMaze[y][x], hasCoin: false };
      return newMaze;
    });
    
    setCollectedCoins(prev => prev + 1);
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –º–æ–Ω–µ—Ç—É
    updateScore(player.id, 1);
    
    setMessage("–ú–æ–Ω–µ—Ç–∞ —Å–æ–±—Ä–∞–Ω–∞! +1 –æ—á–∫–æ");
  };
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
  const completeLevel = () => {
    // –ë–æ–Ω—É—Å –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    const levelBonus = level * 2;
    updateScore(player.id, levelBonus);
    
    setMessage(`–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–π–¥–µ–Ω! +${levelBonus} –æ—á–∫–æ–≤`);
    
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    setTimeout(() => {
      setLevel(prev => prev + 1);
    }, 1500);
  };
  
  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞
  const getPlayerColor = () => {
    const colors = ["#FF5252", "#4CAF50", "#2196F3", "#FF9800"];
    return colors[player.id - 1] || colors[0];
  };
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  const playerAreaStyle = {
    backgroundColor: player.isWinner ? "#FFF9C4" : "#F0F4F8",
    borderColor: getPlayerColor(),
    boxShadow: player.isWinner ? `0 0 20px ${getPlayerColor()}` : "none",
  };
  
  return (
    <div 
      className={`rounded-lg border-4 flex flex-col p-2 transition-all duration-300 ${
        gameOver && player.isWinner ? "animate-bounce-custom" : ""
      }`}
      style={playerAreaStyle}
    >
      <div className="flex justify-between items-center mb-1">
        <div className="text-lg font-bold" style={{ color: getPlayerColor() }}>
          –ò–≥—Ä–æ–∫ {player.id}
        </div>
        <div className="text-lg font-bold">
          {player.score} {player.score === 1 ? "–æ—á–∫–æ" : player.score < 5 ? "–æ—á–∫–∞" : "–æ—á–∫–æ–≤"}
        </div>
      </div>
      
      {/* –°–æ–æ–±—â–µ–Ω–∏–µ */}
      <div className="text-center text-sm mb-1" style={{ color: getPlayerColor() }}>
        {message}
      </div>
      
      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ */}
      <div className="flex justify-between text-xs mb-1">
        <div>–£—Ä–æ–≤–µ–Ω—å: {level}</div>
        <div>–ú–æ–Ω–µ—Ç—ã: {collectedCoins}</div>
        <div>–®–∞–≥–∏: {steps}</div>
      </div>
      
      {gameOver && player.isWinner && (
        <div className="text-center mb-2 text-xl font-bold text-yellow-600">
          –ü–û–ë–ï–î–ò–¢–ï–õ–¨! üèÜ
        </div>
      )}
      
      {/* –õ–∞–±–∏—Ä–∏–Ω—Ç */}
      <div className="flex-1 grid grid-cols-7 gap-[2px] mb-2" 
        style={{ 
          gridTemplateColumns: `repeat(${mazeSize}, 1fr)`,
          aspectRatio: '1/1'
        }}
      >
        {maze.map((row, y) =>
          row.map((cell, x) => (
            <div
              key={`cell-${y}-${x}`}
              className={`relative flex items-center justify-center 
                ${cell.isWall ? 'bg-gray-800' : 'bg-white'}
                ${cell.isStart ? 'bg-green-200' : ''}
                ${cell.isEnd ? 'bg-red-200' : ''}`}
              style={{
                width: '100%',
                height: '100%',
                fontSize: `${100 / mazeSize}%`
              }}
            >
              {/* –ò–≥—Ä–æ–∫ */}
              {playerPosition.x === x && playerPosition.y === y && (
                <div 
                  className="absolute w-[80%] h-[80%] rounded-full"
                  style={{ backgroundColor: getPlayerColor() }}
                />
              )}
              
              {/* –ú–æ–Ω–µ—Ç–∞ */}
              {cell.hasCoin && (
                <div className="absolute text-yellow-500" style={{ fontSize: `${150 / mazeSize}%` }}>
                  üí∞
                </div>
              )}
            </div>
          ))
        )}
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="grid grid-cols-3 grid-rows-3 gap-1">
        <div></div>
        <Button
          className="bg-gray-200 hover:bg-gray-300 text-gray-800"
          disabled={gameOver}
          onClick={() => movePlayer(0, -1)}
        >
          ‚Üë
        </Button>
        <div></div>
        <Button
          className="bg-gray-200 hover:bg-gray-300 text-gray-800"
          disabled={gameOver}
          onClick={() => movePlayer(-1, 0)}
        >
          ‚Üê
        </Button>
        <div className="flex items-center justify-center text-xs text-gray-500">
          {playerPosition.x},{playerPosition.y}
        </div>
        <Button
          className="bg-gray-200 hover:bg-gray-300 text-gray-800"
          disabled={gameOver}
          onClick={() => movePlayer(1, 0)}
        >
          ‚Üí
        </Button>
        <div></div>
        <Button
          className="bg-gray-200 hover:bg-gray-300 text-gray-800"
          disabled={gameOver}
          onClick={() => movePlayer(0, 1)}
        >
          ‚Üì
        </Button>
        <div></div>
      </div>
    </div>
  );
};

export default MazeRunnerGame;
