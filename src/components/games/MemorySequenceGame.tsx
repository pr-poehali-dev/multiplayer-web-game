
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";

interface MemorySequenceGameProps {
  player: {
    id: number;
    score: number;
    isActive: boolean;
    isWinner: boolean;
  };
  updateScore: (playerId: number, points: number) => void;
  gameOver: boolean;
}

const MemorySequenceGame = ({ player, updateScore, gameOver }: MemorySequenceGameProps) => {
  const [sequence, setSequence] = useState<number[]>([]);
  const [playerSequence, setPlayerSequence] = useState<number[]>([]);
  const [isShowingSequence, setIsShowingSequence] = useState(false);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [level, setLevel] = useState(3); // –ù–∞—á–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const [tapsCount, setTapsCount] = useState(0);
  const [message, setMessage] = useState<string>("");

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∏–ª–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ —É—Ä–æ–≤–Ω—è
  useEffect(() => {
    if (player.isActive && !gameOver && !isShowingSequence && sequence.length === 0) {
      generateNewSequence();
    }
  }, [player.isActive, gameOver, level]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  const generateNewSequence = () => {
    const newSequence = [];
    for (let i = 0; i < level; i++) {
      newSequence.push(Math.floor(Math.random() * 4) + 1);
    }
    setSequence(newSequence);
    setPlayerSequence([]);
    setIsShowingSequence(true);
    setCurrentIndex(0);
    setMessage("–ó–∞–ø–æ–º–∏–Ω–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å...");
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    showSequence(newSequence);
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫—É
  const showSequence = (seq: number[]) => {
    let currentIdx = 0;
    
    const interval = setInterval(() => {
      if (currentIdx < seq.length) {
        setCurrentIndex(seq[currentIdx]);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É —á–µ—Ä–µ–∑ 500 –º—Å
        setTimeout(() => {
          setCurrentIndex(0);
        }, 500);
        
        currentIdx++;
      } else {
        clearInterval(interval);
        setIsShowingSequence(false);
        setMessage("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!");
      }
    }, 1000);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
  const handleButtonClick = (value: number) => {
    if (gameOver || !player.isActive || isShowingSequence) return;
    
    setTapsCount(prev => prev + 1);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
    const newPlayerSequence = [...playerSequence, value];
    setPlayerSequence(newPlayerSequence);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã–±—Ä–∞–Ω–æ —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const index = playerSequence.length;
    if (value !== sequence[index]) {
      // –û—à–∏–±–∫–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      setMessage("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
      setTimeout(() => {
        generateNewSequence();
      }, 1000);
      return;
    }
    
    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≤—Ç–æ—Ä–∏–ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if (newPlayerSequence.length === sequence.length) {
      setMessage("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å...");
      updateScore(player.id, level); // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ —Ä–∞–≤–Ω—ã–µ –¥–ª–∏–Ω–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      setLevel(prev => Math.min(prev + 1, 8));
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –ø–∞—É–∑—É
      setTimeout(() => {
        generateNewSequence();
      }, 1000);
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞
  const getPlayerColor = () => {
    const colors = ["#FF5252", "#4CAF50", "#2196F3", "#FF9800"];
    return colors[player.id - 1] || colors[0];
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  const playerAreaStyle = {
    backgroundColor: player.isWinner ? "#FFF9C4" : "white",
    borderColor: getPlayerColor(),
    boxShadow: player.isWinner ? `0 0 20px ${getPlayerColor()}` : "none",
  };

  return (
    <div 
      className={`rounded-lg border-4 flex flex-col p-2 transition-all duration-300 ${
        gameOver && player.isWinner ? "animate-bounce-custom" : ""
      }`}
      style={playerAreaStyle}
    >
      <div className="flex justify-between items-center mb-2">
        <div className="text-lg font-bold" style={{ color: getPlayerColor() }}>
          –ò–≥—Ä–æ–∫ {player.id}
        </div>
        <div className="text-lg font-bold">
          {player.score} {player.score === 1 ? "–æ—á–∫–æ" : player.score < 5 ? "–æ—á–∫–∞" : "–æ—á–∫–æ–≤"}
        </div>
      </div>
      
      {!gameOver && (
        <div className="text-center mb-2">
          <span style={{ color: getPlayerColor() }}>{message}</span>
          {playerSequence.length > 0 && !isShowingSequence && (
            <div className="text-xs mt-1">
              {playerSequence.length} / {sequence.length}
            </div>
          )}
        </div>
      )}
      
      {gameOver && player.isWinner && (
        <div className="text-center mb-2 text-xl font-bold text-yellow-600">
          –ü–û–ë–ï–î–ò–¢–ï–õ–¨! üèÜ
        </div>
      )}
      
      <div className="grid grid-cols-2 gap-2 flex-1">
        {[1, 2, 3, 4].map((value) => (
          <Button
            key={`${player.id}-${value}`}
            className="h-full w-full text-2xl font-bold transition-all duration-150"
            variant="outline"
            style={{
              backgroundColor: currentIndex === value ? getPlayerColor() : "white",
              borderColor: getPlayerColor(),
              color: currentIndex === value ? "white" : "black",
              opacity: gameOver || (isShowingSequence && currentIndex !== value) ? 0.7 : 1,
              transform: currentIndex === value ? "scale(1.05)" : "scale(1)",
            }}
            disabled={gameOver || isShowingSequence}
            onClick={() => handleButtonClick(value)}
          >
            {value}
          </Button>
        ))}
      </div>
      
      <div className="text-xs text-gray-500 mt-1 text-right">
        –£—Ä–æ–≤–µ–Ω—å: {level - 2}, –ù–∞–∂–∞—Ç–∏–π: {tapsCount}
      </div>
    </div>
  );
};

export default MemorySequenceGame;
