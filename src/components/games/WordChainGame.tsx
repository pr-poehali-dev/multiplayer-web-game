
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";

interface WordChainGameProps {
  player: {
    id: number;
    score: number;
    isActive: boolean;
    isWinner: boolean;
  };
  updateScore: (playerId: number, points: number) => void;
  gameOver: boolean;
}

const WordChainGame = ({ player, updateScore, gameOver }: WordChainGameProps) => {
  const [currentWord, setCurrentWord] = useState<string>("");
  const [letterOptions, setLetterOptions] = useState<string[]>([]);
  const [targetWordLength, setTargetWordLength] = useState(4);
  const [availableWords, setAvailableWords] = useState<string[]>([]);
  const [correctWords, setCorrectWords] = useState<string[]>([]);
  const [message, setMessage] = useState("");
  const [timeLeft, setTimeLeft] = useState(20);
  const [level, setLevel] = useState(1);
  
  // –°–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã
  const wordsByLength: Record<number, string[]> = {
    3: ["–∫–æ—Ç", "–¥–æ–º", "—Å–∞–¥", "–º–∏—Ä", "–ª–µ—Å", "—Å–æ–Ω", "—Ä–æ—Ç", "–≥–æ–¥", "–∑—É–±", "–Ω–æ—Å", "—Å—ã—Ä", "—Å—É–ø", "—á–∞–π", "—Ä–∏—Å", "–ª—É–∫"],
    4: ["—Ä–µ–∫–∞", "–≥–æ—Ä–∞", "–º–æ—Ä–µ", "—Å–Ω–µ–≥", "–∑–≤—É–∫", "–∏–≥—Ä–∞", "–¥—Ä—É–≥", "–≤—Ä–∞–≥", "–±—Ä–∞—Ç", "—Ç–µ–ª–æ", "–Ω–µ–±–æ", "–∫—Ä–∏–∫", "—Å–≤–µ—Ç", "—Ç—å–º–∞", "—Å—Ç–æ–ª"],
    5: ["–∫–Ω–∏–≥–∞", "–∑–µ–º–ª—è", "–≤–µ—Ç–µ—Ä", "–æ–≥–æ–Ω—å", "–≤–æ–¥–∞", "–≥–æ—Ä–æ–¥", "–ø—Ç–∏—Ü–∞", "—Ä—ã–±–∞", "—Å–æ–ª–Ω—Ü–µ", "–ª—É–Ω–∞", "–ø–µ—Å–Ω—è", "—Å–ª–æ–≤–æ", "–≤—Ä–µ–º—è", "–º–µ—Å—Ç–æ", "—Ç–µ–ø–ª–æ"],
    6: ["—Å—Ç—Ä–∞–Ω–∞", "–∫–æ—Ä–∞–±–ª—å", "–∑–¥–∞–Ω–∏–µ", "–¥–µ—Ä–µ–≤–æ", "–∫–∞–º–µ–Ω—å", "–∑–≤–µ–∑–¥–∞", "–ø–ª–∞–Ω–µ—Ç–∞", "–º–∞—à–∏–Ω–∞", "—É–ª–∏—Ü–∞", "–¥–µ–Ω—å–≥–∏", "–æ–¥–µ–∂–¥–∞", "–º—É–∑—ã–∫–∞", "—Ä–∞–¥—É–≥–∞", "–≤–æ—Ä–æ–Ω–∞", "–º–æ–ª–æ–∫–æ"]
  };
  
  // –ß–∞—Å—Ç—ã–µ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–±–æ—Ä–∞
  const frequentLetters = "–æ–µ–∞–∏–Ω—Ç—Å—Ä–≤–ª–∫–º–¥–ø—É—è—ã—å–≥–∑–±—á–π—Ö–∂—à—é—â—ç—é—Ñ—ä";
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  useEffect(() => {
    if (player.isActive && !gameOver) {
      startNewRound();
    }
    
    return () => {
      // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    };
  }, [player.isActive, gameOver, level]);
  
  // –¢–∞–π–º–µ—Ä –¥–ª—è —Ä–∞—É–Ω–¥–∞
  useEffect(() => {
    let timerId: number | null = null;
    
    if (player.isActive && !gameOver && timeLeft > 0) {
      timerId = window.setInterval(() => {
        setTimeLeft(prev => {
          if (prev <= 1) {
            endRound();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    }
    
    return () => {
      if (timerId) {
        clearInterval(timerId);
      }
    };
  }, [player.isActive, gameOver, timeLeft]);
  
  // –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
  const startNewRound = () => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –¥–ª–∏–Ω—É —Å–ª–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    const wordLength = Math.min(3 + Math.floor(level / 2), 6);
    setTargetWordLength(wordLength);
    
    // –í—ã–±–∏—Ä–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    const words = wordsByLength[wordLength] || wordsByLength[3];
    setAvailableWords(words);
    setCorrectWords([]);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—É–∫–≤—ã –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤
    generateLetterOptions(wordLength);
    
    setCurrentWord("");
    setTimeLeft(20);
    setMessage(`–°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –∏–∑ ${wordLength} –±—É–∫–≤`);
  };
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –±—É–∫–≤, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤
  const generateLetterOptions = (wordLength: number) => {
    const words = wordsByLength[wordLength] || wordsByLength[3];
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –±—É–∫–≤—ã –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤
    let letters = "";
    const selectedWords = [];
    
    for (let i = 0; i < 3; i++) {
      const randomIndex = Math.floor(Math.random() * words.length);
      const word = words[randomIndex];
      selectedWords.push(word);
      letters += word;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∞—Å—Ç—ã—Ö –±—É–∫–≤
    for (let i = 0; i < 5; i++) {
      const randomIndex = Math.floor(Math.random() * frequentLetters.length);
      letters += frequentLetters[randomIndex];
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º
    const uniqueLetters = Array.from(new Set(letters.split('')));
    const shuffledLetters = uniqueLetters.sort(() => 0.5 - Math.random());
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤
    setLetterOptions(shuffledLetters.slice(0, 12));
  };
  
  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—É–∫–≤—ã –∫ —Ç–µ–∫—É—â–µ–º—É —Å–ª–æ–≤—É
  const addLetter = (letter: string) => {
    if (gameOver || !player.isActive || currentWord.length >= targetWordLength) return;
    
    setCurrentWord(prev => prev + letter);
  };
  
  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤—ã
  const removeLetter = () => {
    if (gameOver || !player.isActive || currentWord.length === 0) return;
    
    setCurrentWord(prev => prev.slice(0, -1));
  };
  
  // –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–ª–æ–≤–∞
  const clearWord = () => {
    if (gameOver || !player.isActive) return;
    
    setCurrentWord("");
  };
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–æ–≤–∞
  const checkWord = () => {
    if (gameOver || !player.isActive || currentWord.length !== targetWordLength) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ
    if (availableWords.includes(currentWord.toLowerCase())) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —Å–ª–æ–≤–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
      if (correctWords.includes(currentWord.toLowerCase())) {
        setMessage("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ!");
      } else {
        // –ó–∞—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–æ
        handleCorrectWord();
      }
    } else {
      setMessage("–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ");
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
    setCurrentWord("");
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞
  const handleCorrectWord = () => {
    setCorrectWords(prev => [...prev, currentWord.toLowerCase()]);
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
    updateScore(player.id, targetWordLength - 2); // 3 –±—É–∫–≤—ã = 1 –æ—á–∫–æ, 4 –±—É–∫–≤—ã = 2 –æ—á–∫–∞ –∏ —Ç.–¥.
    
    setMessage(`–û—Ç–ª–∏—á–Ω–æ! +${targetWordLength - 2} ${(targetWordLength - 2) === 1 ? "–æ—á–∫–æ" : "–æ—á–∫–∞"}`);
    
    // –ï—Å–ª–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∏ 3 —Å–ª–æ–≤–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    if (correctWords.length >= 2) {
      setTimeLeft(3);
      setMessage("–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å...");
    }
  };
  
  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
  const endRound = () => {
    // –ï—Å–ª–∏ –±—ã–ª–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–ª–æ–≤–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    if (correctWords.length > 0) {
      setLevel(prev => prev + 1);
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
    startNewRound();
  };
  
  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞
  const getPlayerColor = () => {
    const colors = ["#FF5252", "#4CAF50", "#2196F3", "#FF9800"];
    return colors[player.id - 1] || colors[0];
  };
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  const playerAreaStyle = {
    backgroundColor: player.isWinner ? "#FFF9C4" : "white",
    borderColor: getPlayerColor(),
    boxShadow: player.isWinner ? `0 0 20px ${getPlayerColor()}` : "none",
  };
  
  return (
    <div 
      className={`rounded-lg border-4 flex flex-col p-2 transition-all duration-300 ${
        gameOver && player.isWinner ? "animate-bounce-custom" : ""
      }`}
      style={playerAreaStyle}
    >
      <div className="flex justify-between items-center mb-1">
        <div className="text-lg font-bold" style={{ color: getPlayerColor() }}>
          –ò–≥—Ä–æ–∫ {player.id}
        </div>
        <div className="text-lg font-bold">
          {player.score} {player.score === 1 ? "–æ—á–∫–æ" : player.score < 5 ? "–æ—á–∫–∞" : "–æ—á–∫–æ–≤"}
        </div>
      </div>
      
      {/* –°–æ–æ–±—â–µ–Ω–∏–µ */}
      <div className="text-center text-sm mb-1" style={{ color: getPlayerColor() }}>
        {message}
      </div>
      
      {gameOver && player.isWinner && (
        <div className="text-center mb-2 text-xl font-bold text-yellow-600">
          –ü–û–ë–ï–î–ò–¢–ï–õ–¨! üèÜ
        </div>
      )}
      
      {/* –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –∏ —É—Ä–æ–≤–µ–Ω—å */}
      <div className="flex justify-between text-xs mb-1">
        <div>–£—Ä–æ–≤–µ–Ω—å: {level}</div>
        <div>–í—Ä–µ–º—è: {timeLeft} —Å–µ–∫</div>
      </div>
      
      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—Ä–µ–º–µ–Ω–∏ */}
      <div className="h-1 bg-gray-200 w-full rounded mb-2">
        <div 
          className="h-1 rounded transition-all duration-300"
          style={{ 
            width: `${(timeLeft / 20) * 100}%`,
            backgroundColor: getPlayerColor()
          }}
        />
      </div>
      
      {/* –¢–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ */}
      <div className="bg-gray-100 border border-gray-300 rounded p-2 mb-2 h-10 flex items-center justify-center">
        <div className="font-bold text-xl tracking-wider">
          {currentWord || "_ ".repeat(targetWordLength).trim()}
        </div>
      </div>
      
      {/* –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ */}
      <div className="text-xs text-center mb-2 min-h-6">
        {correctWords.length > 0 && (
          <div>
            –ù–∞–π–¥–µ–Ω–æ: {correctWords.join(", ")}
          </div>
        )}
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∏ –±—É–∫–≤ */}
      <div className="grid grid-cols-4 gap-1 mb-2">
        {letterOptions.map((letter, index) => (
          <Button
            key={`letter-${index}`}
            className="p-1 text-lg font-bold"
            variant="outline"
            style={{
              borderColor: getPlayerColor(),
              opacity: gameOver ? 0.7 : 1,
            }}
            disabled={gameOver || currentWord.length >= targetWordLength}
            onClick={() => addLetter(letter)}
          >
            {letter.toUpperCase()}
          </Button>
        ))}
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="grid grid-cols-3 gap-1">
        <Button
          className="bg-gray-200 hover:bg-gray-300 text-gray-800"
          disabled={gameOver || currentWord.length === 0}
          onClick={removeLetter}
        >
          ‚å´
        </Button>
        <Button
          className="bg-red-100 hover:bg-red-200 text-red-800"
          disabled={gameOver || currentWord.length === 0}
          onClick={clearWord}
        >
          –û—á–∏—Å—Ç–∏—Ç—å
        </Button>
        <Button
          className="bg-green-600 hover:bg-green-700 text-white"
          disabled={gameOver || currentWord.length !== targetWordLength}
          onClick={checkWord}
        >
          –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
        </Button>
      </div>
    </div>
  );
};

export default WordChainGame;
