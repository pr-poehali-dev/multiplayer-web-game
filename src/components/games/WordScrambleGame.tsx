
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";

interface WordScrambleGameProps {
  player: {
    id: number;
    score: number;
    isActive: boolean;
    isWinner: boolean;
  };
  updateScore: (playerId: number, points: number) => void;
  gameOver: boolean;
}

const WordScrambleGame = ({ player, updateScore, gameOver }: WordScrambleGameProps) => {
  const [originalWord, setOriginalWord] = useState<string>("");
  const [scrambledWord, setScrambledWord] = useState<string>("");
  const [options, setOptions] = useState<string[]>([]);
  const [roundCount, setRoundCount] = useState(0);
  const [message, setMessage] = useState<string>("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ");
  
  // –°–ª–æ–≤–∞—Ä—å –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª–æ–≤
  const wordsList = [
    "–∫–æ—Ç", "–¥–æ–º", "—Å–∞–¥", "–º–∏—Ä", "–≥–æ–¥", "–ª–µ—Å", "–º—è—á", "—Å–æ–Ω", "—Ä–æ—Ç", "–∑—É–±",
    "–Ω–æ—Å", "–ª—ë–¥", "–º—ë–¥", "—à–∞—Ä", "—Å—ã—Ä", "—Å—É–ø", "—á–∞–π", "—Ä–∏—Å", "–º–∞–∫", "–ª—É–∫",
    "–∫–∏—Ç", "–º–µ–ª", "–ø–æ–ª", "—Å—Ç–æ–ª", "—Å—Ç—É–ª", "—Å–æ–∫", "–±–µ–≥", "–ø–∞—Ä", "—à—É–º", "–¥—ã–º",
    "–º–æ—Å—Ç", "–ª–∏—Å—Ç", "–≤–æ–ª–∫", "–∑–∞—è—Ü", "—Å–Ω–µ–≥", "–≥—Ä–∞–¥", "—Ä–æ–∑–∞", "–Ω–µ–±–æ", "–º–æ—Ä–µ", "—Ä–µ–∫–∞",
    "—Å–∏–ª–∞", "–≤–æ–¥–∞", "—Ä—ã–±–∞", "–≥–æ—Ä–∞", "–∑–≤—É–∫", "–∏–≥—Ä–∞", "–¥—Ä—É–≥", "–≤—Ä–∞–≥", "–±—Ä–∞—Ç", "–∫—Ä–∏–∫"
  ];
  
  // –°–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
  const advancedWords = [
    "–º–∞—à–∏–Ω–∞", "–∫–æ—Å–º–æ—Å", "–ø–ª–∞–Ω–µ—Ç–∞", "—Å–æ–ª–Ω—Ü–µ", "–º—É–∑—ã–∫–∞", "—Ä–∞–¥—É–≥–∞", "–≤–æ—Ä–æ–Ω–∞", "–º–æ–ª–æ–∫–æ", "–∫–∞–ø—É—Å—Ç–∞", "—Ç–∞—Ä–µ–ª–∫–∞",
    "–∫–∞—Ä—Ç–∏–Ω–∞", "—á–µ–ª–æ–≤–µ–∫", "–º–∏–Ω—É—Ç–∞", "–∏—Å—Ç–æ—Ä–∏—è", "–¥–µ—Ä–µ–≤–Ω—è", "–ø—Ä–∏—Ä–æ–¥–∞", "–∑–¥–æ—Ä–æ–≤—å–µ", "–∫—Ä–∞—Å–æ—Ç–∞", "—Ä–∞–±–æ—Ç–∞", "–ø–æ–≥–æ–¥–∞"
  ];
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    if (player.isActive && !gameOver) {
      generateNewRound();
    }
  }, [player.isActive, gameOver]);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ
  const scrambleWord = (word: string): string => {
    const chars = word.split('');
    
    for (let i = chars.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [chars[i], chars[j]] = [chars[j], chars[i]];
    }
    
    const scrambled = chars.join('');
    
    // –ï—Å–ª–∏ —Å–ª—É—á–∞–π–Ω–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ, –ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
    if (scrambled === word) {
      return scrambleWord(word);
    }
    
    return scrambled;
  };
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Ö–æ–∂–∏—Ö —Å–ª–æ–≤-–æ–±–º–∞–Ω–æ–∫
  const generateSimilarWord = (word: string): string => {
    const chars = word.split('');
    
    // –°–æ–∑–¥–∞–µ–º –º—É—Ç–∞—Ü–∏—é —Å–ª–æ–≤–∞, –∑–∞–º–µ–Ω—è—è, —É–¥–∞–ª—è—è –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—è 1-2 –±—É–∫–≤—ã
    const mutation = Math.floor(Math.random() * 3);
    
    if (mutation === 0 && word.length > 3) {
      // –£–¥–∞–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –±—É–∫–≤—É
      const posToRemove = Math.floor(Math.random() * chars.length);
      chars.splice(posToRemove, 1);
    } else if (mutation === 1) {
      // –ó–∞–º–µ–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –±—É–∫–≤—É
      const posToReplace = Math.floor(Math.random() * chars.length);
      const russianLetters = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è';
      chars[posToReplace] = russianLetters.charAt(Math.floor(Math.random() * russianLetters.length));
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –±—É–∫–≤—É
      const posToAdd = Math.floor(Math.random() * (chars.length + 1));
      const russianLetters = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è';
      chars.splice(posToAdd, 0, russianLetters.charAt(Math.floor(Math.random() * russianLetters.length)));
    }
    
    return chars.join('');
  };
  
  // –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
  const generateNewRound = () => {
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤
    const wordsToUse = roundCount > 3 ? [...wordsList, ...advancedWords] : wordsList;
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
    const randomIndex = Math.floor(Math.random() * wordsToUse.length);
    const word = wordsToUse[randomIndex];
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –±—É–∫–≤—ã
    const scrambled = scrambleWord(word);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    const wrongOptions = [];
    while (wrongOptions.length < 3) {
      // –°–æ–∑–¥–∞–µ–º –ø–æ—Ö–æ–∂–µ–µ —Å–ª–æ–≤–æ-–æ–±–º–∞–Ω–∫—É
      const similarWord = generateSimilarWord(word);
      
      // –î–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ —ç—Ç–æ –Ω–µ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ
      if (!wrongOptions.includes(similarWord) && similarWord !== word) {
        wrongOptions.push(similarWord);
      }
    }
    
    // –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    const allOptions = [word, ...wrongOptions];
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    for (let i = allOptions.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [allOptions[i], allOptions[j]] = [allOptions[j], allOptions[i]];
    }
    
    setOriginalWord(word);
    setScrambledWord(scrambled);
    setOptions(allOptions);
    setMessage("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ");
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
  const handleOptionClick = (option: string) => {
    if (gameOver || !player.isActive) return;
    
    if (option === originalWord) {
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      const points = originalWord.length > 4 ? 2 : 1;
      updateScore(player.id, points);
      setRoundCount(prev => prev + 1);
      setMessage("–í–µ—Ä–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.");
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
      setTimeout(() => {
        generateNewRound();
      }, 1000);
    } else {
      // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
      setMessage("–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };
  
  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞
  const getPlayerColor = () => {
    const colors = ["#FF5252", "#4CAF50", "#2196F3", "#FF9800"];
    return colors[player.id - 1] || colors[0];
  };
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  const playerAreaStyle = {
    backgroundColor: player.isWinner ? "#FFF9C4" : "white",
    borderColor: getPlayerColor(),
    boxShadow: player.isWinner ? `0 0 20px ${getPlayerColor()}` : "none",
  };
  
  return (
    <div 
      className={`rounded-lg border-4 flex flex-col p-2 transition-all duration-300 ${
        gameOver && player.isWinner ? "animate-bounce-custom" : ""
      }`}
      style={playerAreaStyle}
    >
      <div className="flex justify-between items-center mb-2">
        <div className="text-lg font-bold" style={{ color: getPlayerColor() }}>
          –ò–≥—Ä–æ–∫ {player.id}
        </div>
        <div className="text-lg font-bold">
          {player.score} {player.score === 1 ? "–æ—á–∫–æ" : player.score < 5 ? "–æ—á–∫–∞" : "–æ—á–∫–æ–≤"}
        </div>
      </div>
      
      {!gameOver && (
        <div className="text-center mb-2">
          <span style={{ color: getPlayerColor() }}>{message}</span>
        </div>
      )}
      
      {scrambledWord && !gameOver && (
        <div className="text-center mb-4">
          <span className="text-2xl font-bold tracking-widest">{scrambledWord.toUpperCase()}</span>
        </div>
      )}
      
      {gameOver && player.isWinner && (
        <div className="text-center mb-2 text-xl font-bold text-yellow-600">
          –ü–û–ë–ï–î–ò–¢–ï–õ–¨! üèÜ
        </div>
      )}
      
      <div className="grid grid-cols-1 gap-2 flex-1">
        {options.map((option, index) => (
          <Button
            key={`${player.id}-${index}`}
            className="py-2 text-lg font-medium"
            variant="outline"
            style={{
              borderColor: getPlayerColor(),
              opacity: gameOver ? 0.7 : 1,
            }}
            disabled={gameOver}
            onClick={() => handleOptionClick(option)}
          >
            {option}
          </Button>
        ))}
      </div>
      
      <div className="text-xs text-gray-500 mt-1 text-right">
        –†–∞—É–Ω–¥: {roundCount + 1}
      </div>
    </div>
  );
};

export default WordScrambleGame;
