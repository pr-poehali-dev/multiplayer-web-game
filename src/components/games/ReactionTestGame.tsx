
import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";

interface ReactionTestGameProps {
  player: {
    id: number;
    score: number;
    isActive: boolean;
    isWinner: boolean;
  };
  updateScore: (playerId: number, points: number) => void;
  gameOver: boolean;
}

type GameState = 'waiting' | 'ready' | 'go' | 'early' | 'success';

const ReactionTestGame = ({ player, updateScore, gameOver }: ReactionTestGameProps) => {
  const [state, setState] = useState<GameState>('waiting');
  const [color, setColor] = useState('#E5E7EB'); // –°–µ—Ä—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [message, setMessage] = useState('–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å...');
  const [reactionTime, setReactionTime] = useState<number | null>(null);
  const [roundCount, setRoundCount] = useState(0);
  const [averageTime, setAverageTime] = useState<number | null>(null);
  const [bestTime, setBestTime] = useState<number | null>(null);
  
  const startTimeRef = useRef<number | null>(null);
  const timerRef = useRef<number | null>(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    if (player.isActive && !gameOver && state === 'waiting') {
      startNewRound();
    }
    
    return () => {
      if (timerRef.current) {
        clearTimeout(timerRef.current);
      }
    };
  }, [player.isActive, gameOver]);
  
  // –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥
  const startNewRound = () => {
    setState('ready');
    setColor('#FFEB3B'); // –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    setMessage('–ñ–¥–∏—Ç–µ –∑–µ–ª–µ–Ω—ã–π —Å–∏–≥–Ω–∞–ª...');
    
    // –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç 1 –¥–æ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –∑–µ–ª–µ–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    const delay = Math.floor(Math.random() * 4000) + 1000;
    
    timerRef.current = window.setTimeout(() => {
      setState('go');
      setColor('#4CAF50'); // –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "GO"
      setMessage('–ù–ê–ñ–ú–ò–¢–ï!');
      startTimeRef.current = Date.now();
    }, delay);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
  const handleClick = () => {
    if (gameOver || !player.isActive) return;
    
    if (state === 'ready') {
      // –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–Ω–µ–µ –Ω–∞–∂–∞—Ç–∏–µ
      if (timerRef.current) {
        clearTimeout(timerRef.current);
      }
      
      setState('early');
      setColor('#FF5252'); // –ö—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—à–∏–±–∫–∏
      setMessage('–†–∞–Ω–æ! –ù–∞–∂–∞–ª–∏ –¥–æ —Å–∏–≥–Ω–∞–ª–∞.');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      timerRef.current = window.setTimeout(() => {
        startNewRound();
      }, 2000);
      
    } else if (state === 'go') {
      // –£—Å–ø–µ—à–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
      const endTime = Date.now();
      const time = startTimeRef.current ? endTime - startTimeRef.current : 0;
      
      setReactionTime(time);
      setState('success');
      setColor('#9C27B0'); // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è —É—Å–ø–µ—Ö–∞
      setMessage(`–í–∞—à–µ –≤—Ä–µ–º—è: ${time} –º—Å`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      setRoundCount(prev => prev + 1);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª—É—á—à–µ–µ –≤—Ä–µ–º—è
      if (bestTime === null || time < bestTime) {
        setBestTime(time);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
      if (averageTime === null) {
        setAverageTime(time);
      } else {
        setAverageTime((averageTime * (roundCount) + time) / (roundCount + 1));
      }
      
      // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ (–±–æ–ª—å—à–µ –æ—á–∫–æ–≤ –∑–∞ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–µ –Ω–∞–∂–∞—Ç–∏–µ)
      const points = calculatePoints(time);
      updateScore(player.id, points);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      timerRef.current = window.setTimeout(() => {
        startNewRound();
      }, 2000);
    } else if (state === 'early' || state === 'success') {
      // –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
      return;
    }
  };
  
  // –†–∞—Å—á–µ—Ç –æ—á–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∞–∫—Ü–∏–∏
  const calculatePoints = (time: number): number => {
    if (time < 200) return 5; // –°—É–ø–µ—Ä—Å–∫–æ—Ä–æ—Å—Ç—å
    if (time < 300) return 3; // –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ
    if (time < 400) return 2; // –ë—ã—Å—Ç—Ä–æ
    return 1; // –ù–æ—Ä–º–∞–ª—å–Ω–æ
  };
  
  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞
  const getPlayerColor = () => {
    const colors = ["#FF5252", "#4CAF50", "#2196F3", "#FF9800"];
    return colors[player.id - 1] || colors[0];
  };
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  const playerAreaStyle = {
    backgroundColor: player.isWinner ? "#FFF9C4" : "white",
    borderColor: getPlayerColor(),
    boxShadow: player.isWinner ? `0 0 20px ${getPlayerColor()}` : "none",
  };
  
  return (
    <div 
      className={`rounded-lg border-4 flex flex-col p-2 transition-all duration-300 ${
        gameOver && player.isWinner ? "animate-bounce-custom" : ""
      }`}
      style={playerAreaStyle}
    >
      <div className="flex justify-between items-center mb-2">
        <div className="text-lg font-bold" style={{ color: getPlayerColor() }}>
          –ò–≥—Ä–æ–∫ {player.id}
        </div>
        <div className="text-lg font-bold">
          {player.score} {player.score === 1 ? "–æ—á–∫–æ" : player.score < 5 ? "–æ—á–∫–∞" : "–æ—á–∫–æ–≤"}
        </div>
      </div>
      
      {gameOver && player.isWinner && (
        <div className="text-center mb-2 text-xl font-bold text-yellow-600">
          –ü–û–ë–ï–î–ò–¢–ï–õ–¨! üèÜ
        </div>
      )}
      
      {!gameOver && (
        <div className="flex-1 flex flex-col">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ —Ä–µ–∞–∫—Ü–∏–∏ */}
          <Button
            className="flex-1 flex flex-col items-center justify-center text-xl transition-colors"
            style={{
              backgroundColor: color,
              color: state === 'go' ? '#FFFFFF' : '#000000',
              borderColor: getPlayerColor(),
              opacity: gameOver ? 0.7 : 1,
            }}
            disabled={gameOver}
            onClick={handleClick}
          >
            <span className="text-2xl font-bold mb-2">{message}</span>
            {reactionTime !== null && (
              <span className="text-sm">–ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {reactionTime} –º—Å</span>
            )}
          </Button>
          
          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="text-sm mt-2 grid grid-cols-2 gap-2">
            <div className="text-left">
              <span>–†–∞—É–Ω–¥—ã: {roundCount}</span>
            </div>
            <div className="text-right">
              {bestTime !== null && <span>–õ—É—á—à–µ–µ: {bestTime} –º—Å</span>}
            </div>
            <div className="text-left col-span-2">
              {averageTime !== null && (
                <span>–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {Math.round(averageTime)} –º—Å</span>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ReactionTestGame;
