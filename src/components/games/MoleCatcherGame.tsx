
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";

interface MoleCatcherGameProps {
  player: {
    id: number;
    score: number;
    isActive: boolean;
    isWinner: boolean;
  };
  updateScore: (playerId: number, points: number) => void;
  gameOver: boolean;
}

type Hole = {
  id: number;
  hasMole: boolean;
  hasBomb: boolean;
  moleDuration: number;
  showingTime: number;
  isWhacked: boolean;
};

const MoleCatcherGame = ({ player, updateScore, gameOver }: MoleCatcherGameProps) => {
  const [holes, setHoles] = useState<Hole[]>([]);
  const [strikes, setStrikes] = useState(0);
  const [combo, setCombo] = useState(0);
  const [difficulty, setDifficulty] = useState(1);
  const [lastWhack, setLastWhack] = useState<number | null>(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  useEffect(() => {
    if (player.isActive && !gameOver) {
      initializeGame();
    }
    
    return () => {
      // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º—è–Ω–æ–∫ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    };
  }, [player.isActive, gameOver]);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ—Ä
  const initializeGame = () => {
    const initialHoles = Array.from({ length: 9 }).map((_, i) => ({
      id: i,
      hasMole: false,
      hasBomb: false,
      moleDuration: 0,
      showingTime: 0,
      isWhacked: false
    }));
    
    setHoles(initialHoles);
    setStrikes(0);
    setCombo(0);
    setDifficulty(1);
    setLastWhack(null);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    startGameLoop();
  };
  
  // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
  const startGameLoop = () => {
    const gameInterval = setInterval(() => {
      if (gameOver) {
        clearInterval(gameInterval);
        return;
      }
      
      updateHoles();
    }, 200);
    
    // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    return () => {
      clearInterval(gameInterval);
    };
  };
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–æ—Ä
  const updateHoles = () => {
    setHoles(prevHoles => {
      const newHoles = [...prevHoles];
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫—Ä–æ—Ç–æ–≤
      newHoles.forEach(hole => {
        if (hole.hasMole || hole.hasBomb) {
          hole.showingTime += 200;
          
          // –ï—Å–ª–∏ –∫—Ä–æ—Ç –±—ã–ª –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ, —É–±–∏—Ä–∞–µ–º –µ–≥–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ
          if (hole.showingTime >= hole.moleDuration && !hole.isWhacked) {
            if (hole.hasMole) {
              handleMissedMole();
            }
            
            hole.hasMole = false;
            hole.hasBomb = false;
            hole.showingTime = 0;
            hole.isWhacked = false;
          }
        }
      });
      
      // –° –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –ø–æ—è–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π –∫—Ä–æ—Ç –∏–ª–∏ –±–æ–º–±–∞
      const activeMolesCount = newHoles.filter(h => h.hasMole || h.hasBomb).length;
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫—Ä–æ—Ç–æ–≤
      const maxActiveMoles = Math.min(3 + Math.floor(difficulty / 2), 5);
      
      if (activeMolesCount < maxActiveMoles && Math.random() < 0.3) {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –ø—É—Å—Ç—É—é –Ω–æ—Ä—É
        const emptyHoles = newHoles.filter(h => !h.hasMole && !h.hasBomb);
        
        if (emptyHoles.length > 0) {
          const randomIndex = Math.floor(Math.random() * emptyHoles.length);
          const selectedHoleId = emptyHoles[randomIndex].id;
          
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—É–¥–µ—Ç –ª–∏ —ç—Ç–æ –∫—Ä–æ—Ç –∏–ª–∏ –±–æ–º–±–∞
          const isBomb = Math.random() < 0.15 * difficulty; // –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –±–æ–º–±—ã —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è —Å —É—Ä–æ–≤–Ω–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
          
          newHoles[selectedHoleId] = {
            ...newHoles[selectedHoleId],
            hasMole: !isBomb,
            hasBomb: isBomb,
            moleDuration: isBomb 
              ? 3000 - difficulty * 200 // –ë–æ–º–±—ã –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ–ª—å—à–µ
              : Math.max(3000 - difficulty * 300, 1200), // –ö—Ä–æ—Ç—ã —É—Ö–æ–¥—è—Ç –±—ã—Å—Ç—Ä–µ–µ —Å —Ä–æ—Å—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            showingTime: 0,
            isWhacked: false
          };
        }
      }
      
      return newHoles;
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞—Ä–∞ –ø–æ –Ω–æ—Ä–µ
  const handleWhack = (holeId: number) => {
    if (gameOver || !player.isActive) return;
    
    setHoles(prevHoles => {
      const newHoles = [...prevHoles];
      const hole = newHoles[holeId];
      
      if (hole.hasMole && !hole.isWhacked) {
        // –ü–æ–ø–∞–ª–∏ –ø–æ –∫—Ä–æ—Ç—É
        handleMoleWhacked();
        
        newHoles[holeId] = {
          ...hole,
          hasMole: false,
          isWhacked: true
        };
      } else if (hole.hasBomb && !hole.isWhacked) {
        // –ü–æ–ø–∞–ª–∏ –ø–æ –±–æ–º–±–µ
        handleBombWhacked();
        
        newHoles[holeId] = {
          ...hole,
          hasBomb: false,
          isWhacked: true
        };
      } else {
        // –ü—Ä–æ–º–∞—Ö
        handleMiss();
      }
      
      return newHoles;
    });
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞—Ä–∞ –ø–æ –∫—Ä–æ—Ç—É
  const handleMoleWhacked = () => {
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–º–±–æ
    setCombo(prev => prev + 1);
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–º–±–æ
    const comboBonus = Math.min(Math.floor(combo / 3), 3);
    updateScore(player.id, 1 + comboBonus);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–¥–∞—Ä–∞
    setLastWhack(Date.now());
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥—ã–µ 5 –∫—Ä–æ—Ç–æ–≤
    if ((player.score + 1) % 5 === 0) {
      setDifficulty(prev => Math.min(prev + 1, 10));
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞—Ä–∞ –ø–æ –±–æ–º–±–µ
  const handleBombWhacked = () => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —à—Ç—Ä–∞—Ñ
    setCombo(0);
    setStrikes(prev => prev + 1);
    
    // –®—Ç—Ä–∞—Ñ –æ—á–∫–æ–≤
    updateScore(player.id, -2);
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–∞—Ö–∞ –ø–æ –ø—É—Å—Ç–æ–π –Ω–æ—Ä–µ
  const handleMiss = () => {
    // –ù–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–æ–º–∞—Ö
    setStrikes(prev => prev + 1);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –±–æ–ª—å—à–∏–º
    if (combo > 3) {
      setCombo(prev => Math.floor(prev / 2));
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ –∫—Ä–æ—Ç–∞
  const handleMissedMole = () => {
    setCombo(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–º–±–æ
  };
  
  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞
  const getPlayerColor = () => {
    const colors = ["#FF5252", "#4CAF50", "#2196F3", "#FF9800"];
    return colors[player.id - 1] || colors[0];
  };
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  const playerAreaStyle = {
    backgroundColor: player.isWinner ? "#FFF9C4" : "#8B5A2B",
    borderColor: getPlayerColor(),
    boxShadow: player.isWinner ? `0 0 20px ${getPlayerColor()}` : "none",
  };
  
  return (
    <div 
      className={`rounded-lg border-4 flex flex-col p-2 transition-all duration-300 ${
        gameOver && player.isWinner ? "animate-bounce-custom" : ""
      }`}
      style={playerAreaStyle}
    >
      <div className="flex justify-between items-center mb-2">
        <div className="text-lg font-bold" style={{ color: getPlayerColor() }}>
          –ò–≥—Ä–æ–∫ {player.id}
        </div>
        <div className="text-lg font-bold text-white">
          {player.score} {player.score === 1 ? "–æ—á–∫–æ" : player.score < 5 ? "–æ—á–∫–∞" : "–æ—á–∫–æ–≤"}
        </div>
      </div>
      
      {gameOver && player.isWinner && (
        <div className="text-center mb-2 text-xl font-bold text-yellow-600">
          –ü–û–ë–ï–î–ò–¢–ï–õ–¨! üèÜ
        </div>
      )}
      
      {/* –ü–æ–ª–æ—Å–∞ –∫–æ–º–±–æ */}
      <div className="h-2 bg-gray-700 mb-2 rounded-full overflow-hidden">
        <div 
          className="h-full transition-all duration-300"
          style={{ 
            width: `${Math.min(combo * 10, 100)}%`,
            backgroundColor: getPlayerColor()
          }}
        />
      </div>
      
      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
      <div className="flex-1 grid grid-cols-3 gap-2">
        {holes.map((hole, index) => (
          <Button
            key={`hole-${index}`}
            className="relative p-0 h-auto aspect-square overflow-hidden"
            variant="outline"
            style={{
              backgroundColor: '#5D4037',
              borderColor: '#3E2723',
              opacity: gameOver ? 0.7 : 1,
            }}
            disabled={gameOver}
            onClick={() => handleWhack(index)}
          >
            {/* –û—Ç–≤–µ—Ä—Å—Ç–∏–µ –Ω–æ—Ä—ã */}
            <div className="absolute inset-2 rounded-full bg-black opacity-70" />
            
            {/* –ú–æ–ª–æ—Ç–æ–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ */}
            <div 
              className="absolute inset-0 flex items-center justify-center text-3xl"
              style={{ 
                opacity: hole.isWhacked ? 1 : 0,
                transform: hole.isWhacked ? 'translateY(0)' : 'translateY(-50px)',
                transition: 'all 0.1s ease-out' 
              }}
            >
              üî®
            </div>
            
            {/* –ö—Ä–æ—Ç */}
            {hole.hasMole && (
              <div 
                className="absolute w-full bottom-0 flex items-center justify-center"
                style={{ 
                  height: `${Math.min((hole.showingTime / hole.moleDuration) * 100, 100)}%`,
                  transition: 'height 0.2s ease-out'
                }}
              >
                <div className="text-3xl">ü¶´</div>
              </div>
            )}
            
            {/* –ë–æ–º–±–∞ */}
            {hole.hasBomb && (
              <div 
                className="absolute w-full bottom-0 flex items-center justify-center"
                style={{ 
                  height: `${Math.min((hole.showingTime / hole.moleDuration) * 100, 100)}%`,
                  transition: 'height 0.2s ease-out'
                }}
              >
                <div className="text-3xl">üí£</div>
              </div>
            )}
          </Button>
        ))}
      </div>
      
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="text-xs text-white mt-1 flex justify-between">
        <div>–ü—Ä–æ–º–∞—Ö–∏: {strikes}</div>
        <div>–ö–æ–º–±–æ: {combo}</div>
        <div>–£—Ä–æ–≤–µ–Ω—å: {difficulty}</div>
      </div>
    </div>
  );
};

export default MoleCatcherGame;
