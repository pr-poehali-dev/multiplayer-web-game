
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";

interface CardMemoryGameProps {
  player: {
    id: number;
    score: number;
    isActive: boolean;
    isWinner: boolean;
  };
  updateScore: (playerId: number, points: number) => void;
  gameOver: boolean;
}

type Card = {
  id: number;
  emoji: string;
  isFlipped: boolean;
  isMatched: boolean;
};

const CardMemoryGame = ({ player, updateScore, gameOver }: CardMemoryGameProps) => {
  const [cards, setCards] = useState<Card[]>([]);
  const [firstCard, setFirstCard] = useState<number | null>(null);
  const [secondCard, setSecondCard] = useState<number | null>(null);
  const [canFlip, setCanFlip] = useState(true);
  const [moves, setMoves] = useState(0);
  const [pairs, setPairs] = useState(0);
  const [level, setLevel] = useState(1);
  
  // –ù–∞–±–æ—Ä —ç–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ä—Ç
  const emojis = [
    "üê±", "üê∂", "üê≠", "üêπ", "üê∞", "ü¶ä", "üêª", "üêº", // –ñ–∏–≤–æ—Ç–Ω—ã–µ
    "üçé", "üçê", "üçä", "üçã", "üçå", "üçâ", "üçá", "üçì", // –§—Ä—É–∫—Ç—ã
    "üöó", "üöï", "üöô", "üöå", "üöë", "üöì", "üöí", "üèéÔ∏è", // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    "‚öΩ", "üèÄ", "üèà", "‚öæ", "üéæ", "üèê", "üèâ", "üé±", // –°–ø–æ—Ä—Ç
    "üíª", "üì±", "‚åö", "üì∑", "üì∫", "üéÆ", "üïπÔ∏è", "üì≤", // –¢–µ—Ö–Ω–∏–∫–∞
  ];
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    if (player.isActive && !gameOver) {
      generateNewGame();
    }
  }, [player.isActive, gameOver]);
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
  const generateNewGame = () => {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –∫–∞—Ä—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
    let pairsCount;
    switch (level) {
      case 1: pairsCount = 6; break;  // 12 –∫–∞—Ä—Ç (6 –ø–∞—Ä)
      case 2: pairsCount = 8; break;  // 16 –∫–∞—Ä—Ç (8 –ø–∞—Ä)
      default: pairsCount = 10; break; // 20 –∫–∞—Ä—Ç (10 –ø–∞—Ä)
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–∞—Ä
    const shuffledEmojis = [...emojis].sort(() => 0.5 - Math.random()).slice(0, pairsCount);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∫–∞—Ä—Ç
    const newCards: Card[] = [];
    
    shuffledEmojis.forEach((emoji, index) => {
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–∞—Ä—Ç—ã (–ø–∞—Ä—É)
      newCards.push({
        id: index * 2,
        emoji,
        isFlipped: false,
        isMatched: false
      });
      
      newCards.push({
        id: index * 2 + 1,
        emoji,
        isFlipped: false,
        isMatched: false
      });
    });
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã
    const shuffledCards = [...newCards].sort(() => 0.5 - Math.random());
    
    setCards(shuffledCards);
    setFirstCard(null);
    setSecondCard(null);
    setCanFlip(true);
    setMoves(0);
    setPairs(0);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
  const handleCardClick = (index: number) => {
    if (gameOver || !player.isActive || !canFlip) return;
    
    // –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç—É
    if (cards[index].isFlipped || cards[index].isMatched) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç
    setCards(prevCards => 
      prevCards.map((card, i) => 
        i === index ? { ...card, isFlipped: true } : card
      )
    );
    
    if (firstCard === null) {
      // –ü–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞ –≤ –ø–∞—Ä–µ
      setFirstCard(index);
    } else if (secondCard === null) {
      // –í—Ç–æ—Ä–∞—è –∫–∞—Ä—Ç–∞ –≤ –ø–∞—Ä–µ
      setSecondCard(index);
      setCanFlip(false);
      setMoves(prevMoves => prevMoves + 1);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –∫–∞—Ä—Ç—ã
      if (cards[firstCard].emoji === cards[index].emoji) {
        handleMatch(firstCard, index);
      } else {
        // –ö–∞—Ä—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
          handleMismatch(firstCard, index);
        }, 1000);
      }
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç
  const handleMatch = (first: number, second: number) => {
    // –û—Ç–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—ã –∫–∞–∫ —Å–æ–≤–ø–∞–≤—à–∏–µ
    setCards(prevCards => 
      prevCards.map((card, i) => 
        i === first || i === second ? { ...card, isMatched: true } : card
      )
    );
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–∞—Ä
    const newPairs = pairs + 1;
    setPairs(newPairs);
    
    // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
    updateScore(player.id, 2);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
    setFirstCard(null);
    setSecondCard(null);
    setCanFlip(true);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
    if (newPairs === cards.length / 2) {
      // –í—Å–µ –ø–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã, –±–æ–Ω—É—Å –∑–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è
      updateScore(player.id, 5);
      
      // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
      setTimeout(() => {
        setLevel(prevLevel => Math.min(prevLevel + 1, 3));
        generateNewGame();
      }, 1500);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–∞—Ä—Ç
  const handleMismatch = (first: number, second: number) => {
    // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ
    setCards(prevCards => 
      prevCards.map((card, i) => 
        i === first || i === second ? { ...card, isFlipped: false } : card
      )
    );
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
    setFirstCard(null);
    setSecondCard(null);
    setCanFlip(true);
  };
  
  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞
  const getPlayerColor = () => {
    const colors = ["#FF5252", "#4CAF50", "#2196F3", "#FF9800"];
    return colors[player.id - 1] || colors[0];
  };
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  const playerAreaStyle = {
    backgroundColor: player.isWinner ? "#FFF9C4" : "white",
    borderColor: getPlayerColor(),
    boxShadow: player.isWinner ? `0 0 20px ${getPlayerColor()}` : "none",
  };
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å–µ—Ç–∫–µ –∫–∞—Ä—Ç
  const getGridColumns = () => {
    if (cards.length <= 12) return 3;
    if (cards.length <= 16) return 4;
    return 4;
  };
  
  return (
    <div 
      className={`rounded-lg border-4 flex flex-col p-2 transition-all duration-300 ${
        gameOver && player.isWinner ? "animate-bounce-custom" : ""
      }`}
      style={playerAreaStyle}
    >
      <div className="flex justify-between items-center mb-2">
        <div className="text-lg font-bold" style={{ color: getPlayerColor() }}>
          –ò–≥—Ä–æ–∫ {player.id}
        </div>
        <div className="text-lg font-bold">
          {player.score} {player.score === 1 ? "–æ—á–∫–æ" : player.score < 5 ? "–æ—á–∫–∞" : "–æ—á–∫–æ–≤"}
        </div>
      </div>
      
      {!gameOver && (
        <div className="flex justify-between items-center mb-2">
          <div className="text-sm">
            –£—Ä–æ–≤–µ–Ω—å: <span className="font-bold">{level}</span>
          </div>
          <div className="text-sm">
            –ü–∞—Ä—ã: <span className="font-bold">{pairs}/{cards.length/2}</span>
          </div>
          <div className="text-sm">
            –•–æ–¥—ã: <span className="font-bold">{moves}</span>
          </div>
        </div>
      )}
      
      {gameOver && player.isWinner && (
        <div className="text-center mb-2 text-xl font-bold text-yellow-600">
          –ü–û–ë–ï–î–ò–¢–ï–õ–¨! üèÜ
        </div>
      )}
      
      <div 
        className={`grid grid-cols-${getGridColumns()} gap-1 flex-1`}
        style={{ gridTemplateColumns: `repeat(${getGridColumns()}, 1fr)` }}
      >
        {cards.map((card, index) => (
          <Button
            key={`card-${card.id}`}
            className={`p-0 aspect-square transition-all duration-200 ${
              card.isFlipped ? 'rotate-y-180' : ''
            } ${card.isMatched ? 'opacity-60' : ''}`}
            variant="outline"
            style={{
              backgroundColor: card.isFlipped ? 'white' : getPlayerColor(),
              borderColor: getPlayerColor(),
              transform: card.isFlipped ? 'rotateY(180deg)' : '',
              opacity: gameOver ? 0.7 : 1,
            }}
            disabled={gameOver || card.isFlipped || card.isMatched || !canFlip}
            onClick={() => handleCardClick(index)}
          >
            {card.isFlipped && (
              <div className="text-2xl">
                {card.emoji}
              </div>
            )}
          </Button>
        ))}
      </div>
    </div>
  );
};

export default CardMemoryGame;
