
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";

interface ColorMatchGameProps {
  player: {
    id: number;
    score: number;
    isActive: boolean;
    isWinner: boolean;
  };
  updateScore: (playerId: number, points: number) => void;
  gameOver: boolean;
}

type ColorInfo = {
  name: string;
  value: string;
  displayName: string;
};

const ColorMatchGame = ({ player, updateScore, gameOver }: ColorMatchGameProps) => {
  const [buttonsGrid, setButtonsGrid] = useState<{color: ColorInfo, textColor: ColorInfo}[]>([]);
  const [targetColorName, setTargetColorName] = useState<string | null>(null);
  const [tapsCount, setTapsCount] = useState(0);

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞
  const colors: ColorInfo[] = [
    { name: "red", value: "#FF0000", displayName: "–ö–†–ê–°–ù–´–ô" },
    { name: "green", value: "#00BB00", displayName: "–ó–ï–õ–Å–ù–´–ô" },
    { name: "blue", value: "#0000FF", displayName: "–°–ò–ù–ò–ô" },
    { name: "yellow", value: "#FFBB00", displayName: "–ñ–Å–õ–¢–´–ô" },
    { name: "purple", value: "#9900FF", displayName: "–§–ò–û–õ–ï–¢–û–í–´–ô" },
    { name: "orange", value: "#FF9900", displayName: "–û–†–ê–ù–ñ–ï–í–´–ô" }
  ];

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    if (player.isActive && !gameOver) {
      generateNewTarget();
    }
  }, [player.isActive, gameOver]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞
  const generateNewTarget = () => {
    const randomIndex = Math.floor(Math.random() * colors.length);
    const targetColor = colors[randomIndex];
    setTargetColorName(targetColor.name);
    regenerateGrid(targetColor);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ —Å —Ü–≤–µ—Ç–∞–º–∏
  const regenerateGrid = (targetColor: ColorInfo) => {
    const grid = [];
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É 3x3 (9 –∫–Ω–æ–ø–æ–∫)
    for (let i = 0; i < 9; i++) {
      const randomColorIndex = Math.floor(Math.random() * colors.length);
      const randomTextColorIndex = Math.floor(Math.random() * colors.length);
      
      grid.push({
        color: colors[randomColorIndex],
        textColor: colors[randomTextColorIndex]
      });
    }
    
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –Ω–∞ –ø–æ–ª–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    // (—Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—é —Ü–µ–ª–µ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞)
    const matchPosition = Math.floor(Math.random() * 9);
    const randomColorIndex = Math.floor(Math.random() * colors.length);
    grid[matchPosition] = {
      color: colors[randomColorIndex],
      textColor: targetColor
    };
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–µ—Ç–∫—É
    for (let i = grid.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [grid[i], grid[j]] = [grid[j], grid[i]];
    }
    
    setButtonsGrid(grid);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
  const handleButtonClick = (textColorName: string) => {
    if (gameOver || !player.isActive || targetColorName === null) return;
    
    setTapsCount(prev => prev + 1);
    
    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º —Ü–µ–ª–µ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞
    if (textColorName === targetColorName) {
      // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∏ –∑–∞–¥–∞–µ–º –Ω–æ–≤—É—é —Ü–µ–ª—å
      updateScore(player.id, 1);
      generateNewTarget();
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞
  const getPlayerColor = () => {
    const colors = ["#FF5252", "#4CAF50", "#2196F3", "#FF9800"];
    return colors[player.id - 1] || colors[0];
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  const playerAreaStyle = {
    backgroundColor: player.isWinner ? "#FFF9C4" : "white",
    borderColor: getPlayerColor(),
    boxShadow: player.isWinner ? `0 0 20px ${getPlayerColor()}` : "none",
  };

  return (
    <div 
      className={`rounded-lg border-4 flex flex-col p-2 transition-all duration-300 ${
        gameOver && player.isWinner ? "animate-bounce-custom" : ""
      }`}
      style={playerAreaStyle}
    >
      <div className="flex justify-between items-center mb-2">
        <div className="text-lg font-bold" style={{ color: getPlayerColor() }}>
          –ò–≥—Ä–æ–∫ {player.id}
        </div>
        <div className="text-lg font-bold">
          {player.score} {player.score === 1 ? "–æ—á–∫–æ" : player.score < 5 ? "–æ—á–∫–∞" : "–æ—á–∫–æ–≤"}
        </div>
      </div>
      
      {targetColorName && !gameOver && (
        <div className="text-center mb-2">
          –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–ª–æ–≤–æ <span className="font-bold text-xl" style={{ color: getPlayerColor() }}>
            {colors.find(c => c.name === targetColorName)?.displayName || ''}
          </span>
        </div>
      )}
      
      {gameOver && player.isWinner && (
        <div className="text-center mb-2 text-xl font-bold text-yellow-600">
          –ü–û–ë–ï–î–ò–¢–ï–õ–¨! üèÜ
        </div>
      )}
      
      <div className="grid grid-cols-3 gap-2 flex-1">
        {buttonsGrid.map((item, index) => (
          <Button
            key={`${player.id}-${index}`}
            className="h-full w-full font-bold"
            variant="outline"
            style={{
              backgroundColor: item.color.value,
              borderColor: getPlayerColor(),
              color: item.textColor.value,
              opacity: gameOver ? 0.7 : 1,
            }}
            disabled={gameOver}
            onClick={() => handleButtonClick(item.textColor.name)}
          >
            {item.textColor.displayName}
          </Button>
        ))}
      </div>
      
      <div className="text-xs text-gray-500 mt-1 text-right">
        –ù–∞–∂–∞—Ç–∏–π: {tapsCount}
      </div>
    </div>
  );
};

export default ColorMatchGame;
