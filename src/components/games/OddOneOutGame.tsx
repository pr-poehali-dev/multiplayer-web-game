
import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";

interface OddOneOutGameProps {
  player: {
    id: number;
    score: number;
    isActive: boolean;
    isWinner: boolean;
  };
  updateScore: (playerId: number, points: number) => void;
  gameOver: boolean;
}

type Item = {
  emoji: string;
  isOdd: boolean;
  feature: string; // –ß—Ç–æ –æ—Ç–ª–∏—á–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç: "color", "shape", "category", etc.
};

const OddOneOutGame = ({ player, updateScore, gameOver }: OddOneOutGameProps) => {
  const [items, setItems] = useState<Item[]>([]);
  const [level, setLevel] = useState(1);
  const [tapsCount, setTapsCount] = useState(0);
  const [message, setMessage] = useState<string>("–ù–∞–π–¥–∏—Ç–µ –æ—Ç–ª–∏—á–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç");

  // –ú–∞—Å—Å–∏–≤—ã –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø
  const emojiGroups = [
    // –§—Ä—É–∫—Ç—ã
    { main: ["üçé", "üçè", "üçê", "üçä", "üçã"], odd: ["üçâ", "üçá", "üçì", "üçí", "ü•ù"], feature: "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" },
    // –ñ–∏–≤–æ—Ç–Ω—ã–µ
    { main: ["üê∂", "üê±", "ü¶ä", "üêª", "üê®"], odd: ["üê∏", "üê¢", "ü¶é", "üêç", "üêä"], feature: "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" },
    // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    { main: ["üöó", "üöï", "üöô", "üöå", "üöë"], odd: ["‚úàÔ∏è", "üöÅ", "üõ∏", "üöÄ", "üõ∞Ô∏è"], feature: "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" },
    // –°–ø–æ—Ä—Ç
    { main: ["‚öΩ", "üèÄ", "üèà", "‚öæ", "üéæ"], odd: ["üèÜ", "ü•á", "ü•à", "ü•â", "üéñÔ∏è"], feature: "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" },
    // –ü–æ–≥–æ–¥–∞
    { main: ["‚òÄÔ∏è", "üå§Ô∏è", "‚õÖ", "üå•Ô∏è", "üå¶Ô∏è"], odd: ["‚ùÑÔ∏è", "‚õÑ", "üå®Ô∏è", "üå©Ô∏è", "‚òÉÔ∏è"], feature: "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" },
    // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    { main: ["‚¨ÜÔ∏è", "‚ÜóÔ∏è", "‚û°Ô∏è", "‚ÜòÔ∏è", "‚¨áÔ∏è"], odd: ["üîÑ", "üîÅ", "üîÉ", "üîÇ", "üîÄ"], feature: "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" },
    // –¶–≤–µ—Ç–∞ (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ñ–∏–≥—É—Ä—ã, —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞)
    { main: ["üî¥", "üü†", "üü°", "üü¢", "üîµ"], odd: ["‚ö´", "‚ö™", "üü§", "üü£", "üü•"], feature: "–æ—Ç—Ç–µ–Ω–æ–∫" },
    // –§–æ—Ä–º—ã
    { main: ["‚≠ê", "‚ú®", "üí´", "üåü", "‚ö°"], odd: ["‚ù§Ô∏è", "üíô", "üíö", "üíõ", "üíú"], feature: "—Ñ–æ—Ä–º–∞" },
  ];

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    if (player.isActive && !gameOver) {
      generateNewRound();
    }
  }, [player.isActive, gameOver]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ —Å –Ω–æ–≤—ã–º –Ω–∞–±–æ—Ä–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const generateNewRound = () => {
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –≥—Ä—É–ø–ø—É —ç–º–æ–¥–∑–∏
    const groupIndex = Math.floor(Math.random() * emojiGroups.length);
    const selectedGroup = emojiGroups[groupIndex];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Ä–æ–≤–Ω—è)
    const itemsCount = Math.min(9 + (level - 1) * 3, 25); // –æ—Ç 9 –¥–æ 25
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const newItems: Item[] = [];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç–ª–∏—á–∞—é—â–µ–≥–æ—Å—è —ç–ª–µ–º–µ–Ω—Ç–∞
    const oddPosition = Math.floor(Math.random() * itemsCount);
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º –º–∞—Å—Å–∏–≤
    for (let i = 0; i < itemsCount; i++) {
      if (i === oddPosition) {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ª–∏—á–∞—é—â–∏–π—Å—è —ç–ª–µ–º–µ–Ω—Ç
        const randomOddIndex = Math.floor(Math.random() * selectedGroup.odd.length);
        newItems.push({
          emoji: selectedGroup.odd[randomOddIndex],
          isOdd: true,
          feature: selectedGroup.feature
        });
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        const randomMainIndex = Math.floor(Math.random() * selectedGroup.main.length);
        newItems.push({
          emoji: selectedGroup.main[randomMainIndex],
          isOdd: false,
          feature: selectedGroup.feature
        });
      }
    }
    
    setItems(newItems);
    setMessage(`–ù–∞–π–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç, –æ—Ç–ª–∏—á–∞—é—â–∏–π—Å—è –ø–æ ${selectedGroup.feature}`);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
  const handleItemClick = (item: Item, index: number) => {
    if (gameOver || !player.isActive) return;
    
    setTapsCount(prev => prev + 1);
    
    if (item.isOdd) {
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
      updateScore(player.id, level);
      setLevel(prev => Math.min(prev + 1, 5));
      setMessage("–í–µ—Ä–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ.");
      generateNewRound();
    } else {
      // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
      setMessage("–ù–µ–≤–µ—Ä–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞
  const getPlayerColor = () => {
    const colors = ["#FF5252", "#4CAF50", "#2196F3", "#FF9800"];
    return colors[player.id - 1] || colors[0];
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  const playerAreaStyle = {
    backgroundColor: player.isWinner ? "#FFF9C4" : "white",
    borderColor: getPlayerColor(),
    boxShadow: player.isWinner ? `0 0 20px ${getPlayerColor()}` : "none",
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –≤ —Å–µ—Ç–∫–µ
  const getGridColumns = () => {
    if (items.length <= 9) return 3;
    if (items.length <= 16) return 4;
    return 5;
  };

  return (
    <div 
      className={`rounded-lg border-4 flex flex-col p-2 transition-all duration-300 ${
        gameOver && player.isWinner ? "animate-bounce-custom" : ""
      }`}
      style={playerAreaStyle}
    >
      <div className="flex justify-between items-center mb-2">
        <div className="text-lg font-bold" style={{ color: getPlayerColor() }}>
          –ò–≥—Ä–æ–∫ {player.id}
        </div>
        <div className="text-lg font-bold">
          {player.score} {player.score === 1 ? "–æ—á–∫–æ" : player.score < 5 ? "–æ—á–∫–∞" : "–æ—á–∫–æ–≤"}
        </div>
      </div>
      
      {!gameOver && (
        <div className="text-center mb-2">
          <span style={{ color: getPlayerColor() }}>{message}</span>
        </div>
      )}
      
      {gameOver && player.isWinner && (
        <div className="text-center mb-2 text-xl font-bold text-yellow-600">
          –ü–û–ë–ï–î–ò–¢–ï–õ–¨! üèÜ
        </div>
      )}
      
      <div className={`grid grid-cols-${getGridColumns()} gap-2 flex-1`}>
        {items.map((item, index) => (
          <Button
            key={`${player.id}-${index}`}
            className="p-1 h-auto flex items-center justify-center text-3xl"
            variant="outline"
            style={{
              borderColor: getPlayerColor(),
              opacity: gameOver ? 0.7 : 1,
              aspectRatio: "1/1"
            }}
            disabled={gameOver}
            onClick={() => handleItemClick(item, index)}
          >
            {item.emoji}
          </Button>
        ))}
      </div>
      
      <div className="text-xs text-gray-500 mt-1 text-right">
        –£—Ä–æ–≤–µ–Ω—å: {level}, –ù–∞–∂–∞—Ç–∏–π: {tapsCount}
      </div>
    </div>
  );
};

export default OddOneOutGame;
