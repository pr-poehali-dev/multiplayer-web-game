
import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";

interface SpaceRaceGameProps {
  player: {
    id: number;
    score: number;
    isActive: boolean;
    isWinner: boolean;
  };
  updateScore: (playerId: number, points: number) => void;
  gameOver: boolean;
}

type SpaceShip = {
  position: number; // –æ—Ç 0 –¥–æ 100 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
  lane: number; // –ø–æ–ª–æ—Å–∞ –¥–≤–∏–∂–µ–Ω–∏—è
  isBoosting: boolean;
};

type Obstacle = {
  id: number;
  position: number; // –æ—Ç -20 –¥–æ 100 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
  lane: number; // –ø–æ–ª–æ—Å–∞ –¥–≤–∏–∂–µ–Ω–∏—è
  size: number; // —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è 
  passed: boolean;
};

type Star = {
  id: number;
  position: number;
  lane: number;
  collected: boolean;
};

const SpaceRaceGame = ({ player, updateScore, gameOver }: SpaceRaceGameProps) => {
  const [ship, setShip] = useState<SpaceShip>({ position: 80, lane: 1, isBoosting: false });
  const [obstacles, setObstacles] = useState<Obstacle[]>([]);
  const [stars, setStars] = useState<Star[]>([]);
  const [distanceTraveled, setDistanceTraveled] = useState(0);
  const [collisions, setCollisions] = useState(0);
  const [starsCollected, setStarsCollected] = useState(0);
  const [speed, setSpeed] = useState(1.5);
  
  const gameLoopRef = useRef<number | null>(null);
  const obstacleIdRef = useRef(0);
  const starIdRef = useRef(0);
  const lastObstacleTimeRef = useRef(0);
  const lastStarTimeRef = useRef(0);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  useEffect(() => {
    if (player.isActive && !gameOver) {
      startGame();
    }
    
    return () => {
      if (gameLoopRef.current) {
        cancelAnimationFrame(gameLoopRef.current);
      }
    };
  }, [player.isActive, gameOver]);
  
  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã
  const startGame = () => {
    setShip({ position: 80, lane: 1, isBoosting: false });
    setObstacles([]);
    setStars([]);
    setDistanceTraveled(0);
    setCollisions(0);
    setStarsCollected(0);
    setSpeed(1.5);
    
    gameLoop(performance.now());
  };
  
  // –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
  const gameLoop = (timestamp: number) => {
    // –î–≤–∏–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è
    setShip(prevShip => ({
      ...prevShip,
      position: Math.max(0, prevShip.position - (prevShip.isBoosting ? 0.3 : 0.1)),
    }));
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
    if (timestamp - lastObstacleTimeRef.current > 1500) { // –ö–∞–∂–¥—ã–µ 1.5 —Å–µ–∫—É–Ω–¥—ã
      const lane = Math.floor(Math.random() * 3);
      
      setObstacles(prev => [
        ...prev,
        {
          id: obstacleIdRef.current++,
          position: -20,
          lane,
          size: Math.floor(Math.random() * 3) + 1, // –†–∞–∑–º–µ—Ä 1-3
          passed: false
        }
      ]);
      
      lastObstacleTimeRef.current = timestamp;
    }
    
    // –°–æ–∑–¥–∞–µ–º –∑–≤–µ–∑–¥—ã (–±–æ–Ω—É—Å—ã)
    if (timestamp - lastStarTimeRef.current > 3000) { // –ö–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
      const lane = Math.floor(Math.random() * 3);
      
      setStars(prev => [
        ...prev,
        {
          id: starIdRef.current++,
          position: -10,
          lane,
          collected: false
        }
      ]);
      
      lastStarTimeRef.current = timestamp;
    }
    
    // –î–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
    setObstacles(prev => {
      const newObstacles = prev.map(obstacle => {
        // –î–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
        const newPosition = obstacle.position + speed;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
        if (!obstacle.passed && 
            obstacle.lane === ship.lane && 
            newPosition >= ship.position - 10 && 
            newPosition <= ship.position + 10) {
          handleCollision();
          return { ...obstacle, passed: true };
        }
        
        // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
        if (!obstacle.passed && newPosition > ship.position + 15) {
          handleObstaclePassed();
          return { ...obstacle, passed: true };
        }
        
        return { ...obstacle, position: newPosition };
      }).filter(obstacle => obstacle.position < 120); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è, –≤—ã—à–µ–¥—à–∏–µ –∑–∞ —ç–∫—Ä–∞–Ω
      
      return newObstacles;
    });
    
    // –î–≤–∏–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞
    setStars(prev => {
      const newStars = prev.map(star => {
        // –î–≤–∏–∂–µ–Ω–∏–µ –∑–≤–µ–∑–¥—ã
        const newPosition = star.position + speed;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ –∑–≤–µ–∑–¥—ã
        if (!star.collected && 
            star.lane === ship.lane && 
            newPosition >= ship.position - 10 && 
            newPosition <= ship.position + 10) {
          handleStarCollected();
          return { ...star, collected: true };
        }
        
        return { ...star, position: newPosition };
      }).filter(star => !star.collected && star.position < 120); // –£–¥–∞–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∏ –≤—ã—à–µ–¥—à–∏–µ –∑–∞ —ç–∫—Ä–∞–Ω –∑–≤–µ–∑–¥—ã
      
      return newStars;
    });
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    setDistanceTraveled(prev => prev + speed / 10);
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
    if (distanceTraveled % 10 < speed / 10) {
      setSpeed(prev => Math.min(prev + 0.1, 5));
    }
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª
    if (!gameOver) {
      gameLoopRef.current = requestAnimationFrame(gameLoop);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ–º
  const handleCollision = () => {
    setCollisions(prev => prev + 1);
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
  const handleObstaclePassed = () => {
    updateScore(player.id, 1);
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—Ä–∞ –∑–≤–µ–∑–¥—ã
  const handleStarCollected = () => {
    setStarsCollected(prev => prev + 1);
    updateScore(player.id, 3);
  };
  
  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è –≤–ª–µ–≤–æ
  const moveLeft = () => {
    if (gameOver || !player.isActive) return;
    
    setShip(prev => ({
      ...prev,
      lane: Math.max(0, prev.lane - 1)
    }));
  };
  
  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è –≤–ø—Ä–∞–≤–æ
  const moveRight = () => {
    if (gameOver || !player.isActive) return;
    
    setShip(prev => ({
      ...prev,
      lane: Math.min(2, prev.lane + 1)
    }));
  };
  
  // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è
  const startBoost = () => {
    if (gameOver || !player.isActive) return;
    
    setShip(prev => ({
      ...prev,
      isBoosting: true
    }));
  };
  
  // –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è
  const endBoost = () => {
    if (gameOver || !player.isActive) return;
    
    setShip(prev => ({
      ...prev,
      isBoosting: false
    }));
  };
  
  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞
  const getPlayerColor = () => {
    const colors = ["#FF5252", "#4CAF50", "#2196F3", "#FF9800"];
    return colors[player.id - 1] || colors[0];
  };
  
  // –°—Ç–∏–ª–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  const playerAreaStyle = {
    backgroundColor: player.isWinner ? "#FFF9C4" : "#000022",
    borderColor: getPlayerColor(),
    boxShadow: player.isWinner ? `0 0 20px ${getPlayerColor()}` : "none",
  };
  
  return (
    <div 
      className={`rounded-lg border-4 flex flex-col p-2 transition-all duration-300 ${
        gameOver && player.isWinner ? "animate-bounce-custom" : ""
      }`}
      style={playerAreaStyle}
    >
      <div className="flex justify-between items-center mb-2">
        <div className="text-lg font-bold" style={{ color: getPlayerColor() }}>
          –ò–≥—Ä–æ–∫ {player.id}
        </div>
        <div className="text-lg font-bold text-white">
          {player.score} {player.score === 1 ? "–æ—á–∫–æ" : player.score < 5 ? "–æ—á–∫–∞" : "–æ—á–∫–æ–≤"}
        </div>
      </div>
      
      {gameOver && player.isWinner && (
        <div className="text-center mb-2 text-xl font-bold text-yellow-600">
          –ü–û–ë–ï–î–ò–¢–ï–õ–¨! üèÜ
        </div>
      )}
      
      <div className="flex-1 relative bg-black" style={{ overflow: 'hidden' }}>
        {/* –ó–≤–µ–∑–¥—ã –≤ —Ñ–æ–Ω–µ */}
        {Array.from({ length: 20 }).map((_, i) => (
          <div 
            key={`bg-star-${i}`} 
            className="absolute w-1 h-1 bg-white rounded-full" 
            style={{ 
              left: `${Math.random() * 100}%`, 
              top: `${Math.random() * 100}%`,
              opacity: Math.random() * 0.7 + 0.3
            }}
          />
        ))}
        
        {/* –ü–æ–ª–æ—Å—ã –¥–≤–∏–∂–µ–Ω–∏—è */}
        <div className="absolute inset-0 flex">
          {[0, 1, 2].map(lane => (
            <div 
              key={`lane-${lane}`} 
              className="flex-1 border-x border-gray-800 relative"
            >
              {/* –ú–∞—Ä–∫–µ—Ä—ã –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ */}
              {Array.from({ length: 5 }).map((_, i) => (
                <div 
                  key={`marker-${lane}-${i}`} 
                  className="absolute w-full h-1 bg-gray-800"
                  style={{ top: `${i * 25}%` }}
                />
              ))}
            </div>
          ))}
        </div>
        
        {/* –ö–æ—Ä–∞–±–ª—å –∏–≥—Ä–æ–∫–∞ */}
        <div 
          className="absolute w-10 h-10 transition-all duration-150"
          style={{ 
            left: `calc(${(ship.lane * 33.33) + 16.665}% - 20px)`, 
            top: `${ship.position}%`,
            transform: ship.isBoosting ? 'scale(0.8)' : 'scale(1)'
          }}
        >
          <div className="w-full h-full flex items-center justify-center">
            <div
              className="w-0 h-0 relative"
              style={{
                borderLeft: '10px solid transparent',
                borderRight: '10px solid transparent',
                borderBottom: `20px solid ${getPlayerColor()}`,
              }}
            >
              {/* –ü–ª–∞–º—è –¥–≤–∏–≥–∞—Ç–µ–ª—è */}
              <div
                className="absolute w-0 h-0"
                style={{
                  top: '100%',
                  left: '-5px',
                  borderLeft: '5px solid transparent',
                  borderRight: '5px solid transparent',
                  borderTop: `${ship.isBoosting ? '15' : '8'}px solid orange`,
                  opacity: ship.isBoosting ? '1' : '0.7',
                  transition: 'all 0.1s ease-out'
                }}
              />
            </div>
          </div>
        </div>
        
        {/* –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è */}
        {obstacles.map(obstacle => (
          <div
            key={`obstacle-${obstacle.id}`}
            className="absolute rounded-full bg-red-500"
            style={{ 
              width: `${obstacle.size * 10}px`,
              height: `${obstacle.size * 10}px`,
              left: `calc(${(obstacle.lane * 33.33) + 16.665}% - ${obstacle.size * 5}px)`, 
              top: `${obstacle.position}%`,
              opacity: obstacle.passed ? 0.3 : 1,
              transition: 'opacity 0.3s ease-out'
            }}
          />
        ))}
        
        {/* –ó–≤–µ–∑–¥—ã (–±–æ–Ω—É—Å—ã) */}
        {stars.map(star => (
          <div
            key={`star-${star.id}`}
            className="absolute text-yellow-400 text-2xl"
            style={{ 
              left: `calc(${(star.lane * 33.33) + 16.665}% - 10px)`, 
              top: `${star.position}%`,
            }}
          >
            ‚≠ê
          </div>
        ))}
      </div>
      
      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="grid grid-cols-3 gap-1 mt-2">
        <Button
          variant="outline"
          className="h-12"
          style={{ borderColor: getPlayerColor() }}
          disabled={gameOver}
          onClick={moveLeft}
        >
          ‚¨ÖÔ∏è
        </Button>
        <Button
          variant="outline"
          className="h-12"
          style={{ borderColor: getPlayerColor() }}
          disabled={gameOver}
          onMouseDown={startBoost}
          onMouseUp={endBoost}
          onMouseLeave={endBoost}
          onTouchStart={startBoost}
          onTouchEnd={endBoost}
        >
          üöÄ
        </Button>
        <Button
          variant="outline"
          className="h-12"
          style={{ borderColor: getPlayerColor() }}
          disabled={gameOver}
          onClick={moveRight}
        >
          ‚û°Ô∏è
        </Button>
      </div>
      
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="text-xs text-gray-400 mt-1 flex justify-between">
        <div>–ó–≤–µ–∑–¥—ã: {starsCollected}</div>
        <div>–î–∏—Å—Ç: {Math.floor(distanceTraveled)} ly</div>
        <div>–°—Ç–æ–ª–∫–Ω: {collisions}</div>
      </div>
    </div>
  );
};

export default SpaceRaceGame;
